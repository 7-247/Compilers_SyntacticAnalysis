项目：
 [{'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True}] 

新项目：
 [{'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'number'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'if'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'float'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '{'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '*'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'double'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'identifier'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '#'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ','}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ')'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '-='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'for'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '>='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'break'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '^='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'char'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '&='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '!='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '*='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '=='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '&'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '}'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ';'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'while'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '|='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '<'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'int'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '/'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'continue'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '^'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'else'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'void'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '+'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '%'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '/='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '-'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '('}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '>'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '+='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'return'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '%='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '<='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'number'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'if'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'float'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '{'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '*'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'double'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'identifier'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '#'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ','}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ')'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '-='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'for'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '>='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'break'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '^='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'char'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '&='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '!='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '*='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '=='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '&'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '}'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ';'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'while'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '|='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '<'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'int'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '/'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'continue'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '^'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'else'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'void'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '+'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '%'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '/='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '-'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '('}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '>'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '+='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'return'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '%='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '^='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '&='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '&'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '|='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '^'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '%'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '%='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '^='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '&='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '&'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '|='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '^'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '%'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '%='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '^='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '&='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '&'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '|='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '^'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '%'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '%='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '<='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'number'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'if'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'float'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '{'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '*'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'double'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'identifier'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '#'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ','}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ')'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '-='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'for'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '>='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'break'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '^='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'char'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '&='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '!='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '*='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '=='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '&'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '}'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ';'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'while'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '|='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '<'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'int'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '/'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'continue'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '^'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'else'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'void'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '+'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '%'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '/='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '-'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '('}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '>'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '+='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'return'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '%='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '<='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '{'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '*'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '#'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ','}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ')'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '-='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '>='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '^='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '&='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '!='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '*='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '=='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '&'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '}'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ';'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '|='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '<'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '/'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '^'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '+'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '%'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '/='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '-'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '('}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '>'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '+='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '%='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '<='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '{'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '*'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '#'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ','}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ')'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '-='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '>='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '^='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '&='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '!='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '*='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '=='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '&'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '}'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ';'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '|='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '<'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '/'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '^'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '+'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '%'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '/='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '-'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '('}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '>'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '+='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '%='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '<='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '{'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '*'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '#'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ','}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ')'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '-='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '>='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '^='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '&='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '!='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '*='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '=='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '&'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '}'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ';'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '|='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '<'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '/'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '^'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '+'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '%'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '/='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '-'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '('}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '>'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '+='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '%='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '<='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '{'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '*'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '#'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ','}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ')'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '-='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '>='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '^='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '&='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '!='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '*='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '=='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '&'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '}'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ';'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '|='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '<'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '/'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '^'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '+'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '%'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '/='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '-'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '('}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '>'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '+='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '%='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '^='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '&='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '&'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '|='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '^'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '%'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '%='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '^='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '&='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '&'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '|='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '^'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '%'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '%='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '^='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '&='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '&'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '|='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '^'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '%'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '%='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '^='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '&='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '&'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '|='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '^'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '%'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '%='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '^='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '&='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '&'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '|='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '^'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '%'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '%='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '^='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '&='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '&'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '|='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '^'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '%'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '%='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '^='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '&='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '&'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '|='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '^'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '%'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '%='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '^='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '&='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '&'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '|='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '^'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '%'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '%='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '^='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '&='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '&'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '|='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '^'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '%'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '%='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '^='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '&='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '&'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '|='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '^'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '%'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '%='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '^='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '&='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '&'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '|='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '^'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '%'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '%='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '^='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '&='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '&'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '|='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '^'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '%'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '%='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '^='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '&='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '&'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '|='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '^'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '%'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '%='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '^='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '&='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '&'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '|='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '^'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '%'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '%='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '^='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '&='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '&'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '|='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '^'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '%'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '%='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '^='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '&='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '&'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '|='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '^'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '%'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '%='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '^='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '&='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '&'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '|='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '^'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '%'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '%='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '^='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '&='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '&'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '|='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '^'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '%'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '%='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '^='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '&='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '&'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '|='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '^'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '%'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '%='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '^='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '&='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '&'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '|='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '^'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '%'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '%='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '^='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '&='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '&'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '|='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '^'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '%'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '%='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '^='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '&='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '&'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '|='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '^'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '%'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '%='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '^='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '&='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '&'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '|='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '^'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '%'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '%='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '^='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '&='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '&'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '|='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '^'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '%'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '%='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '^='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '&='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '&'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '|='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '^'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '%'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '%='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '^='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '&='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '&'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '|='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '^'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '%'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '%='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '^='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '&='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '&'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '|='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '^'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '%'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '%='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '^='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '&='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '&'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '|='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '^'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '%'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '%='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '^='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '&='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '&'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '|='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '^'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '%'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '%='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['%'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['%'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['^'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['^'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['&'], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['&'], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['<'], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['<'], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['>'], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['>'], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['!='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['!='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['=='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['=='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['<='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['<='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '^='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '&='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '&'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '|='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '^'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '%'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '%='}, {'left': 'operator', 'right': ['>='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '^='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '&='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '&'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '|='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '^'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '%'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '%='}, {'left': 'operator', 'right': ['>='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 34, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 35, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 36, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 36, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['%='], 'point': 1, 'origin': 37, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 0, 'origin': 38, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['^='], 'point': 1, 'origin': 38, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['&='], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '^='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '&='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '&'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '|='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '^'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '%'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '%='}, {'left': 'assignment_operator', 'right': ['|='], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 41, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '^='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '&='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '&'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '|='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '^'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '%'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '%='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 41, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '^='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '&='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '&'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '|='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '^'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '%'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '%='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '^='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '&='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '&'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '|='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '^'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '%'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '%='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 43, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 44, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '^='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '&='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '&'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '|='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '^'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '%'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '%='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 44, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '^='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '&='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '&'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '|='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '^'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '%'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '%='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 44, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '^='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '&='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '&'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '|='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '^'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '%'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '%='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 45, 'isTer': True, 'accept': '<='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'number'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'if'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'float'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '{'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '*'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'double'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '#'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ','}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ')'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '-='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'for'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '>='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'break'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '^='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'char'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '&='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '!='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '*='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '=='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '&'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '}'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ';'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'while'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '|='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '<'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'int'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '/'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'continue'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '^'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'else'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'void'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '+'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '%'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '/='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '-'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '('}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '>'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '+='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'return'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '%='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '<='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'number'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'if'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'float'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '{'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '*'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'double'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '#'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': ','}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': ')'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '-='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'for'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '>='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'break'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '^='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'char'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '&='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '!='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '*='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '=='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '&'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '}'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': ';'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'while'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '|='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '<'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'int'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '/'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'continue'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '^'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'else'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'void'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '+'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '%'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '/='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '-'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '('}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '>'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '+='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': 'return'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '%='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 46, 'isTer': True, 'accept': '<='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'number'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'if'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'float'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '{'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '*'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'double'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '#'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': ','}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': ')'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '-='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'for'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '>='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'break'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '^='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'char'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '&='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '!='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '*='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '=='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '&'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '}'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': ';'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'while'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '|='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '<'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'int'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '/'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'continue'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '^'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'else'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'void'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '+'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '%'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '/='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '-'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '('}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '>'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '+='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': 'return'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '%='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 47, 'isTer': False, 'accept': '<='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'number'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'if'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'float'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '{'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '*'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'double'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '#'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': ','}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': ')'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '-='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'for'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '>='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'break'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '^='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'char'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '&='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '!='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '*='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '=='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '&'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '}'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': ';'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'while'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '|='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '<'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'int'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '/'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'continue'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '^'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'else'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'void'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '+'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '%'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '/='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '-'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '('}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '>'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '+='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': 'return'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '%='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 47, 'isTer': True, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '^='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '&='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '&'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '|='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '^'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '%'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '%='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '^='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '&='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '&'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '|='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '^'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '%'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '%='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '^='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '&='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '&'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '|='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '^'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '%'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '%='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '^='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '&='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '&'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '|='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '^'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '%'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '%='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 49, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '^='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '&='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '&'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '|='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '^'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '%'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '%='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 49, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '^='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '&='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '&'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '|='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '^'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '%'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '%='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 49, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '^='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '&='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '&'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '|='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '^'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '%'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '%='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 49, 'isTer': True, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': ','}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '^='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '&='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '&'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '|='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '^'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '%'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '('}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '%='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 50, 'isTer': True, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '^='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '&='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '&'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '|='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '^'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '%'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '%='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '^='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '&='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '&'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '|='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '^'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '%'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '%='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '^='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '&='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '&'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '|='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '^'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '%'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '%='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '^='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '&='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '&'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '|='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '^'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '%'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '%='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '^='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '&='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '&'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '|='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '^'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '%'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '%='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 51, 'isTer': True, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '^='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '&='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '&'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '|='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '^'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '%'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '%='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 52, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '^='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '&='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '&'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '|='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '^'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '%'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '%='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 52, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '^='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '&='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '&'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '|='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '^'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '%'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '%='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 52, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '^='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '&='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '&'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '|='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '^'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '%'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '%='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 52, 'isTer': True, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '^='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '&='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '&'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '|='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '^'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '%'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '%='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 53, 'isTer': True, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '^='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '&='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '&'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '|='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '^'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '%'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '%='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '^='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '&='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '&'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '|='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '^'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '%'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '%='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '^='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '&='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '&'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '|='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '^'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '%'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '%='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 54, 'isTer': True, 'accept': '<='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '{'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '*'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '#'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ','}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ')'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '-='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '>='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '^='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '&='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '!='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '*='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '=='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '&'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '}'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ';'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '|='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '<'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '/'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '^'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '+'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '%'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '/='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '-'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '('}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '>'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '+='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '%='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '^='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '&='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '&'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '|='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '^'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '%'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '%='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 56, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 58, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 59, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 60, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 60, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 60, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 60, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 61, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '^='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '&='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '&'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '|='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '^'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '%'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '%='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 63, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '^='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '&='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '&'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '|='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '^'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '%'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '%='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 63, 'isTer': True, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '^='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '&='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '&'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '|='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '^'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '%'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '%='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '^='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '&='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '&'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '|='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '^'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '%'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '%='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 64, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '^='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '&='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '&'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '|='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '^'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '%'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '%='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 64, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '^='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '&='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '&'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '|='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '^'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '%'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '%='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 64, 'isTer': True, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '^='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '&='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '&'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '|='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '^'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '%'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '%='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '^='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '&='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '&'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '|='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '^'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '%'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '%='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 65, 'isTer': False, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '^='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '&='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '&'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '|='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '^'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '%'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '%='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 65, 'isTer': True, 'accept': '<='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'number'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'if'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'float'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '{'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '*'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'double'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '#'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': ','}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': ')'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '-='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'for'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '>='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'break'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '^='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'char'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '&='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '!='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '*='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '=='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '&'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '}'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': ';'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'while'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '|='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '<'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'int'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '/'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'continue'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '^'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'else'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'void'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '+'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '%'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '/='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '-'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '('}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '>'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '+='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': 'return'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '%='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 66, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 67, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 68, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 69, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 70, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 71, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '^='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '&='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '&'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '|='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '^'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '%'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '%='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '^='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '&='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '&'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '|='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '^'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '%'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '%='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 72, 'isTer': True, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '^='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '&='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '&'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '|='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '^'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '%'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '%='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '^='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '&='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '&'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '|='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '^'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '%'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '%='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '^='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '&='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '&'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '|='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '^'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '%'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '%='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 73, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '^='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '&='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '&'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '|='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '^'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '%'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '%='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 74, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 75, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 75, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '^='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '&='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '&'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '|='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '^'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '%'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '%='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 75, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 76, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 76, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 76, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 76, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 77, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 77, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '^='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '&='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '&'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '|='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '^'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '%'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '%='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 77, 'isTer': True, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 78, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '^='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '&='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '&'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '|='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '^'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '%'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '%='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 78, 'isTer': True, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 79, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 79, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 79, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 79, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 79, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 79, 'isTer': True, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 80, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '^='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '&='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '&'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '|='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '^'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '%'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '%='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 80, 'isTer': True, 'accept': '<='}] 

原点在开头的产生式编号：
 {'sstart': {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42}, 'start': {86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257}, 'external_declaration': {258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386}, 'type_specifier': {516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472}, 'declaration': {896, 897, 898, 899, 900, 901, 902, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895}, 'declaration_parameter': {1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117}, 'declaration_parameter_assign': {1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375}, 'declaration_parameter_suffix': {1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418}, 'primary_expression': {1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805}, 'operator': {2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047}, 'assignment_operator': {3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783}, 'assignment_expression': {3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839}, 'assignment_expression_list_suffix': {4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041}, 'assignment_expression_list': {4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385}, 'expression': {4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514}, 'constant_expression': {4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600}, 'arithmetic_expression': {4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901}, 'function_expression': {4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944}, 'expression_list_suffix': {5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5117, 5118, 5119}, 'expression_list': {5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503}, 'function_definition': {5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546}, 'function_parameter_list': {5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019}, 'function_parameter_list_suffix': {6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105}, 'function_parameter': {6400, 6401, 6402, 6403, 6404, 6405, 6406, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399}, 'compound_statement': {6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527}, 'statement_list': {6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836}, 'statement': {7181, 7182, 7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191, 7192, 7193, 7194, 7195, 7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050, 7051, 7095, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137}, 'expression_statement': {7353, 7354, 7355, 7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395}, 'jump_statement': {7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 7775, 7776, 7777, 7778, 7779, 7780, 7781, 7782, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929, 7930, 7931, 7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952, 7953, 7954, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653}, 'selection_statement': {8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063}, 'iteration_statement': {8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425, 8426, 8427, 8643, 8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654, 8655, 8656, 8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8667, 8668, 8669, 8670, 8671, 8672, 8673, 8674, 8675, 8676, 8677, 8678, 8679, 8680, 8681, 8682, 8683, 8684, 8685}} 

