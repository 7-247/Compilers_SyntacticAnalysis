Gotoï¼š
Goto(I0,type_specifier) = Closure( [5549, 5552, 5554, 5563, 5574, 5579, 905, 908, 910, 919, 930, 935] ) = {930, 5574, 935, 905, 1098, 5579, 1083, 5549, 908, 910, 5552, 5554, 919, 5563} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char } = I1
Goto(I0,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I0,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I0,function_definition) = Closure( [389, 392, 394, 403, 414, 419] ) = {403, 419, 389, 392, 394, 414} ={ external_declaration->function_definition,char external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,# external_declaration->function_definition,int } = I4
Goto(I0,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I0,start) = Closure( [50] ) = {50} ={ sstart->start,# } = I6
Goto(I0,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I0,declaration) = Closure( [303, 306, 308, 317, 328, 333] ) = {306, 308, 328, 333, 317, 303} ={ external_declaration->declaration,double external_declaration->declaration,# external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,char external_declaration->declaration,float } = I8
Goto(I0,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I0,external_declaration) = Closure( [136] ) = {5506, 260, 5509, 263, 136, 265, 522, 5511, 780, 5520, 274, 5531, 285, 5536, 290, 436, 694, 346, 93, 862, 349, 608, 865, 351, 867, 222, 360, 876, 371, 887, 376, 892} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float external_declaration->declaration,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double external_declaration->declaration,double start->external_declarationstart,# external_declaration->declaration,# type_specifier->int,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# type_specifier->void,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char external_declaration->declaration,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int external_declaration->declaration,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void external_declaration->declaration,void type_specifier->char,identifier type_specifier->float,identifier external_declaration->function_definition,float start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float external_declaration->function_definition,double type_specifier->double,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double external_declaration->function_definition,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# start->,# external_declaration->function_definition,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char external_declaration->function_definition,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->function_definition,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I10

Goto(I1,identifier) = Closure( [5617, 1141, 5622, 1126, 5592, 5595, 5597, 5606] ) = {5597, 1126, 5606, 1227, 1356, 5617, 1141, 5622, 5592, 5595, 1212, 1341} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char declaration_parameter_assign->=expression,; declaration_parameter_assign->,; function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration_parameter->identifierdeclaration_parameter_assign,; function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double declaration_parameter_assign->=expression,, declaration_parameter_assign->,, } = I11
Goto(I1,declaration_parameter) = Closure( [973, 978, 948, 951, 953, 962] ) = {962, 1571, 973, 978, 948, 951, 953, 1399} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I12









Goto(I10,type_specifier) = Closure( [5549, 5552, 5554, 5563, 5574, 5579, 905, 908, 910, 919, 930, 935] ) = {930, 5574, 935, 905, 1098, 5579, 1083, 5549, 908, 910, 5552, 5554, 919, 5563} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char } = I1
Goto(I10,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I10,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I10,function_definition) = Closure( [389, 392, 394, 403, 414, 419] ) = {403, 419, 389, 392, 394, 414} ={ external_declaration->function_definition,char external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,# external_declaration->function_definition,int } = I4
Goto(I10,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I10,start) = Closure( [179] ) = {179} ={ start->external_declarationstart,# } = I13
Goto(I10,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I10,declaration) = Closure( [303, 306, 308, 317, 328, 333] ) = {306, 308, 328, 333, 317, 303} ={ external_declaration->declaration,double external_declaration->declaration,# external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,char external_declaration->declaration,float } = I8
Goto(I10,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I10,external_declaration) = Closure( [136] ) = {5506, 260, 5509, 263, 136, 265, 522, 5511, 780, 5520, 274, 5531, 285, 5536, 290, 436, 694, 346, 93, 862, 349, 608, 865, 351, 867, 222, 360, 876, 371, 887, 376, 892} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float external_declaration->declaration,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double external_declaration->declaration,double start->external_declarationstart,# external_declaration->declaration,# type_specifier->int,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# type_specifier->void,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char external_declaration->declaration,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int external_declaration->declaration,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void external_declaration->declaration,void type_specifier->char,identifier type_specifier->float,identifier external_declaration->function_definition,float start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float external_declaration->function_definition,double type_specifier->double,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double external_declaration->function_definition,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# start->,# external_declaration->function_definition,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char external_declaration->function_definition,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->function_definition,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I10

Goto(I11,=) = Closure( [1270, 1255] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4394, 4910, 4409, 1595, 4925, 1599, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4480, 4495, 1681, 1685, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4566, 4581, 1767, 1255, 1771, 1775, 1781, 1270, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,, function_expression->identifier(expression_list),, expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,, primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,, expression->function_expression,; primary_expression->number,* primary_expression->number,, primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* declaration_parameter_assign->=expression,, primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= declaration_parameter_assign->=expression,; primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I14
Goto(I11,declaration_parameter_assign) = Closure( [1169, 1184] ) = {1184, 1169} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, } = I15
Goto(I11,() = Closure( [5640, 5649, 5660, 5665, 5635, 5638] ) = {5635, 5638, 5640, 522, 780, 5649, 5660, 608, 5665, 5986, 6372, 6373, 436, 5814, 5943, 694, 6396} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# type_specifier->int,identifier type_specifier->void,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int type_specifier->double,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void function_parameter_list->void,) function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,) type_specifier->char,identifier function_parameter_list->function_parameterfunction_parameter_list_suffix,) function_parameter_list->,) type_specifier->float,identifier function_parameter->type_specifieridentifier,void } = I16

Goto(I12,,) = Closure( [1442] ) = {1442, 1083, 1098} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I17
Goto(I12,declaration_parameter_suffix) = Closure( [1005, 1016, 1021, 991, 994, 996] ) = {1005, 994, 996, 1016, 1021, 991} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float } = I18


Goto(I14,expression) = Closure( [1298, 1313] ) = {1313, 1298} ={ declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, } = I19
Goto(I14,constant_expression) = Closure( [4437, 4452] ) = {4452, 4437} ={ expression->constant_expression,; expression->constant_expression,, } = I20
Goto(I14,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I21
Goto(I14,number) = Closure( [1724, 1728, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I22
Goto(I14,identifier) = Closure( [4953, 1638, 4968, 1642, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1642, 1676, 1646, 1657, 1652, 1654, 1655, 4953, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,; primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, primary_expression->identifier,< primary_expression->identifier,/ } = I23
Goto(I14,function_expression) = Closure( [4523, 4538] ) = {4538, 4523} ={ expression->function_expression,; expression->function_expression,, } = I24
Goto(I14,primary_expression) = Closure( [4609, 4624] ) = {4609, 4867, 2058, 2316, 2574, 2832, 4624, 4882, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 2144, 2402, 2660, 2918, 4710, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, arithmetic_expression->,, operator->-,( operator->%,( operator-><,( operator->==,( constant_expression->primary_expressionarithmetic_expression,; arithmetic_expression->,; operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->*,( operator->^,( operator->>,( operator-><=,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I25


Goto(I16,type_specifier) = Closure( [6415, 6416, 6439] ) = {6416, 6439, 6415} ={ function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,, } = I26
Goto(I16,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I16,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I16,function_parameter) = Closure( [5857] ) = {6072, 5857, 6244, 6287} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list->function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->,) function_parameter_list_suffix->void,) } = I27
Goto(I16,void) = Closure( [823, 6029] ) = {6029, 823} ={ function_parameter_list->void,) type_specifier->void,identifier } = I28
Goto(I16,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I16,function_parameter_list) = Closure( [5678, 5681, 5683, 5692, 5703, 5708] ) = {5681, 5683, 5703, 5692, 5678, 5708} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void } = I29
Goto(I16,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9

Goto(I17,identifier) = Closure( [1126, 1141] ) = {1141, 1126, 1356, 1227, 1212, 1341} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->,; declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, declaration_parameter_assign->,, } = I30
Goto(I17,declaration_parameter) = Closure( [1485] ) = {1571, 1485, 1399} ={ declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I31

Goto(I18,;) = Closure( [1048, 1037, 1039, 1059, 1064, 1034] ) = {1059, 1034, 1048, 1064, 1037, 1039} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# } = I32



Goto(I21,expression) = Closure( [1853, 1857, 1861, 1867, 1869, 1870, 1872, 1875, 1877, 1879, 1882, 1883, 1885, 1887, 1891] ) = {1857, 1891, 1861, 1867, 1885, 1869, 1870, 1872, 1875, 1877, 1879, 1882, 1883, 1853, 1887} ={ primary_expression->(expression),, primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),* primary_expression->(expression),> } = I33
Goto(I21,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I21,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I21,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I21,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I21,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I21,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I23,() = Closure( [5011, 4996] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4394, 4395, 4910, 4911, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 5470, 1633, 4480, 4481, 4996, 1681, 5011, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4566, 4567, 5341, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,, expression->constant_expression,) function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> expression_list->,) primary_expression->identifier,<= expression->function_expression,, expression->function_expression,) function_expression->identifier(expression_list),, primary_expression->number,* function_expression->identifier(expression_list),; primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) expression_list->expressionexpression_list_suffix,) primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I40


Goto(I25,arithmetic_expression) = Closure( [4652, 4667] ) = {4667, 4652} ={ constant_expression->primary_expressionarithmetic_expression,; constant_expression->primary_expressionarithmetic_expression,, } = I41
Goto(I25,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I25,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I25,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I25,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I25,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I25,operator) = Closure( [4738, 4753] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1595, 1599, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4738, 1681, 4753, 1685, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1767, 1771, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,, primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I47
Goto(I25,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I25,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I25,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I25,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I25,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I25,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I25,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I25,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I26,identifier) = Closure( [6459, 6482, 6458] ) = {6482, 6459, 6458} ={ function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,, } = I56

Goto(I27,,) = Closure( [6115] ) = {608, 6115, 6372, 6373, 522, 780, 436, 694, 6396} ={ type_specifier->double,identifier function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,) type_specifier->int,identifier type_specifier->void,identifier type_specifier->char,identifier type_specifier->float,identifier function_parameter->type_specifieridentifier,void } = I57
Goto(I27,void) = Closure( [6330] ) = {6330} ={ function_parameter_list_suffix->void,) } = I58
Goto(I27,function_parameter_list_suffix) = Closure( [5900] ) = {5900} ={ function_parameter_list->function_parameterfunction_parameter_list_suffix,) } = I59


Goto(I29,)) = Closure( [5724, 5726, 5746, 5735, 5721, 5751] ) = {6498, 6500, 5735, 6509, 5746, 5751, 6520, 5721, 5724, 6525, 5726, 6495} ={ compound_statement->{statement_list},double compound_statement->{statement_list},# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char compound_statement->{statement_list},char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void compound_statement->{statement_list},int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double compound_statement->{statement_list},void function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# compound_statement->{statement_list},float } = I60

Goto(I30,=) = Closure( [1270, 1255] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4394, 4910, 4409, 1595, 4925, 1599, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4480, 4495, 1681, 1685, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4566, 4581, 1767, 1255, 1771, 1775, 1781, 1270, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,, function_expression->identifier(expression_list),, expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,, primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,, expression->function_expression,; primary_expression->number,* primary_expression->number,, primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* declaration_parameter_assign->=expression,, primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= declaration_parameter_assign->=expression,; primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I14
Goto(I30,declaration_parameter_assign) = Closure( [1184, 1169] ) = {1184, 1169} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, } = I15

Goto(I31,,) = Closure( [1442] ) = {1442, 1083, 1098} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I17
Goto(I31,declaration_parameter_suffix) = Closure( [1528] ) = {1528} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I61


Goto(I33,)) = Closure( [1900, 1934, 1904, 1910, 1928, 1912, 1913, 1915, 1918, 1920, 1922, 1925, 1926, 1896, 1930] ) = {1920, 1922, 1925, 1926, 1928, 1896, 1930, 1900, 1934, 1904, 1910, 1912, 1913, 1915, 1918} ={ primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),, primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< } = I62


Goto(I35,expression) = Closure( [1853, 1858, 1861, 1867, 1869, 1870, 1875, 1877, 1879, 1882, 1883, 1885, 1887, 1891] ) = {1858, 1891, 1861, 1867, 1885, 1869, 1870, 1875, 1877, 1879, 1882, 1883, 1853, 1887} ={ primary_expression->(expression),) primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),* primary_expression->(expression),> } = I63
Goto(I35,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I35,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I35,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I35,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I35,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I35,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I37,() = Closure( [4997] ) = {4480, 1793, 4481, 1796, 1797, 4997, 1799, 1801, 1805, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4394, 4395, 1707, 4910, 4911, 1710, 1711, 1713, 1715, 1719, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4566, 4567, 1624, 1625, 1627, 1629, 5470, 5341, 1633, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ expression->function_expression,, primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% function_expression->identifier(expression_list),) primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,, expression->constant_expression,) primary_expression->number,^ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> expression_list->,) expression_list->expressionexpression_list_suffix,) primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I64


Goto(I39,arithmetic_expression) = Closure( [4653] ) = {4653} ={ constant_expression->primary_expressionarithmetic_expression,) } = I65
Goto(I39,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I39,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I39,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I39,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I39,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I39,operator) = Closure( [4739] ) = {1793, 4739, 1796, 1797, 1799, 1801, 1805, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I66
Goto(I39,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I39,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I39,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I39,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I39,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I39,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I39,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I39,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I40,expression) = Closure( [5384] ) = {5384, 5298, 5126} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I67
Goto(I40,constant_expression) = Closure( [4437, 4438] ) = {4437, 4438} ={ expression->constant_expression,, expression->constant_expression,) } = I68
Goto(I40,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I40,expression_list) = Closure( [5039, 5054] ) = {5054, 5039} ={ function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, } = I70
Goto(I40,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I40,identifier) = Closure( [4953, 4954, 1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 4953, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I72
Goto(I40,function_expression) = Closure( [4523, 4524] ) = {4523, 4524} ={ expression->function_expression,, expression->function_expression,) } = I73
Goto(I40,primary_expression) = Closure( [4609, 4610] ) = {4609, 4610, 4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I74







Goto(I47,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I21
Goto(I47,number) = Closure( [1724, 1728, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I22
Goto(I47,identifier) = Closure( [1638, 1642, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I75
Goto(I47,primary_expression) = Closure( [4781, 4796] ) = {4867, 2058, 2316, 2574, 2832, 4882, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 2144, 2402, 2660, 2918, 4710, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 4781, 1972, 2230, 2488, 2746, 3004, 4796, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ arithmetic_expression->,, operator->-,( operator->%,( operator-><,( operator->==,( arithmetic_expression->,; operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->*,( operator->^,( operator->>,( operator-><=,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I76










Goto(I57,type_specifier) = Closure( [6415, 6416, 6439] ) = {6416, 6439, 6415} ={ function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,, } = I26
Goto(I57,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I57,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I57,function_parameter) = Closure( [6158] ) = {6072, 6244, 6158, 6287} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->void,) } = I77
Goto(I57,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I57,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I57,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9



Goto(I60,{) = Closure( [6541, 6543, 6552, 6563, 6568, 6538] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6538, 6541, 6543, 6552, 6563, 6568, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},# compound_statement->{statement_list},char compound_statement->{statement_list},int compound_statement->{statement_list},void type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I78
Goto(I60,compound_statement) = Closure( [5778, 5789, 5794, 5764, 5767, 5769] ) = {5794, 5778, 5764, 5767, 5769, 5789} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int } = I79



Goto(I63,)) = Closure( [1901, 1934, 1904, 1910, 1928, 1912, 1913, 1918, 1920, 1922, 1925, 1926, 1896, 1930] ) = {1920, 1922, 1925, 1926, 1928, 1896, 1930, 1901, 1934, 1904, 1910, 1912, 1913, 1918} ={ primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),) primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< } = I80

Goto(I64,expression) = Closure( [5384] ) = {5384, 5298, 5126} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I67
Goto(I64,constant_expression) = Closure( [4437, 4438] ) = {4437, 4438} ={ expression->constant_expression,, expression->constant_expression,) } = I68
Goto(I64,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I64,expression_list) = Closure( [5040] ) = {5040} ={ function_expression->identifier(expression_list),) } = I81
Goto(I64,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I64,identifier) = Closure( [4953, 4954, 1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 4953, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I72
Goto(I64,function_expression) = Closure( [4523, 4524] ) = {4523, 4524} ={ expression->function_expression,, expression->function_expression,) } = I73
Goto(I64,primary_expression) = Closure( [4609, 4610] ) = {4609, 4610, 4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I74


Goto(I66,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I66,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I66,identifier) = Closure( [1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ } = I82
Goto(I66,primary_expression) = Closure( [4782] ) = {4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 4782, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I83

Goto(I67,,) = Closure( [5169] ) = {4480, 1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4394, 4395, 1707, 4910, 4911, 1710, 5169, 1711, 1713, 1715, 1719, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4566, 4567, 1624, 1625, 1627, 1629, 1633, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ expression->function_expression,, primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,, expression->constant_expression,) primary_expression->number,^ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->number,+ expression_list_suffix->,expressionexpression_list_suffix,) primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I84
Goto(I67,expression_list_suffix) = Closure( [5427] ) = {5427} ={ expression_list->expressionexpression_list_suffix,) } = I85


Goto(I69,expression) = Closure( [1853, 1857, 1858, 1861, 1867, 1869, 1870, 1875, 1877, 1879, 1882, 1883, 1885, 1887, 1891] ) = {1857, 1858, 1891, 1861, 1867, 1885, 1869, 1870, 1875, 1877, 1879, 1882, 1883, 1853, 1887} ={ primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),* primary_expression->(expression),> } = I86
Goto(I69,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I69,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I69,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I69,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I69,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I69,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39

Goto(I70,)) = Closure( [5097, 5082] ) = {5097, 5082} ={ function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, } = I87


Goto(I72,() = Closure( [4996, 4997] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4394, 4395, 4910, 4911, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 5470, 1633, 4480, 4481, 4996, 4997, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4566, 4567, 5341, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,, expression->constant_expression,) function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> expression_list->,) primary_expression->identifier,<= expression->function_expression,, expression->function_expression,) function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) expression_list->expressionexpression_list_suffix,) primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I88


Goto(I74,arithmetic_expression) = Closure( [4652, 4653] ) = {4652, 4653} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) } = I89
Goto(I74,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I74,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I74,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I74,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I74,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I74,operator) = Closure( [4738, 4739] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4738, 4739, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I90
Goto(I74,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I74,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I74,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I74,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I74,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I74,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I74,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I74,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55


Goto(I76,arithmetic_expression) = Closure( [4824, 4839] ) = {4824, 4839} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,; } = I91
Goto(I76,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I76,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I76,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I76,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I76,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I76,operator) = Closure( [4738, 4753] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1595, 1599, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4738, 1681, 4753, 1685, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1767, 1771, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,, primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I47
Goto(I76,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I76,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I76,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I76,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I76,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I76,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I76,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I76,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I77,,) = Closure( [6115] ) = {608, 6115, 6372, 6373, 522, 780, 436, 694, 6396} ={ type_specifier->double,identifier function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,) type_specifier->int,identifier type_specifier->void,identifier type_specifier->char,identifier type_specifier->float,identifier function_parameter->type_specifieridentifier,void } = I57
Goto(I77,void) = Closure( [6330] ) = {6330} ={ function_parameter_list_suffix->void,) } = I58
Goto(I77,function_parameter_list_suffix) = Closure( [6201] ) = {6201} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) } = I92

Goto(I78,type_specifier) = Closure( [904, 905, 906, 908, 909, 914, 916, 919, 925, 927, 926, 930, 932, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I78,statement) = Closure( [6730] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 6730, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break statement_list->statementstatement_list,} jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I94
Goto(I78,if) = Closure( [8085, 8086, 8087, 8089, 8090, 8095, 8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I78,selection_statement) = Closure( [7053, 7054, 7055, 7057, 7058, 7063, 7065, 7068, 7074, 7075, 7076, 7081, 7079, 7084, 7092] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I78,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I78,{) = Closure( [6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I78,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I78,assignment_expression_list) = Closure( [7397, 7398, 7399, 7401, 7402, 7407, 7409, 7412, 7418, 7419, 7420, 7423, 7425, 7428, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I78,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I78,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I78,iteration_statement) = Closure( [7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167, 7170, 7178] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I78,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I78,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I78,statement_list) = Closure( [6581, 6584, 6586, 6595, 6606, 6611] ) = {6595, 6611, 6581, 6584, 6586, 6606} ={ compound_statement->{statement_list},char compound_statement->{statement_list},void compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},# compound_statement->{statement_list},int } = I102
Goto(I78,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I78,break) = Closure( [7655, 7656, 7657, 7659, 7660, 7665, 7667, 7670, 7676, 7677, 7678, 7681, 7683, 7686, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I78,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I78,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909, 6912, 6920] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I78,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I78,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I78,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I78,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I78,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I78,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111



Goto(I81,)) = Closure( [5083] ) = {5083} ={ function_expression->identifier(expression_list),) } = I112


Goto(I83,arithmetic_expression) = Closure( [4825] ) = {4825} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,) } = I113
Goto(I83,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I83,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I83,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I83,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I83,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I83,operator) = Closure( [4739] ) = {1793, 4739, 1796, 1797, 1799, 1801, 1805, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I66
Goto(I83,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I83,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I83,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I83,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I83,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I83,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I83,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I83,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I84,expression) = Closure( [5212] ) = {5298, 5212, 5126} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list_suffix->,expressionexpression_list_suffix,) } = I114
Goto(I84,constant_expression) = Closure( [4437, 4438] ) = {4437, 4438} ={ expression->constant_expression,, expression->constant_expression,) } = I68
Goto(I84,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I84,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I84,identifier) = Closure( [4953, 4954, 1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 4953, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I72
Goto(I84,function_expression) = Closure( [4523, 4524] ) = {4523, 4524} ={ expression->function_expression,, expression->function_expression,) } = I73
Goto(I84,primary_expression) = Closure( [4609, 4610] ) = {4609, 4610, 4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I74


Goto(I86,)) = Closure( [1900, 1901, 1934, 1904, 1910, 1928, 1912, 1913, 1918, 1920, 1922, 1925, 1926, 1896, 1930] ) = {1920, 1922, 1925, 1926, 1928, 1896, 1930, 1900, 1901, 1934, 1904, 1910, 1912, 1913, 1918} ={ primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< } = I115


Goto(I88,expression) = Closure( [5384] ) = {5384, 5298, 5126} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I67
Goto(I88,constant_expression) = Closure( [4437, 4438] ) = {4437, 4438} ={ expression->constant_expression,, expression->constant_expression,) } = I68
Goto(I88,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I88,expression_list) = Closure( [5039, 5040] ) = {5040, 5039} ={ function_expression->identifier(expression_list),) function_expression->identifier(expression_list),, } = I116
Goto(I88,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I88,identifier) = Closure( [4953, 4954, 1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 4953, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I72
Goto(I88,function_expression) = Closure( [4523, 4524] ) = {4523, 4524} ={ expression->function_expression,, expression->function_expression,) } = I73
Goto(I88,primary_expression) = Closure( [4609, 4610] ) = {4609, 4610, 4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I74


Goto(I90,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I90,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I90,identifier) = Closure( [1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ } = I117
Goto(I90,primary_expression) = Closure( [4781, 4782] ) = {4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 4781, 4782, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I118



Goto(I93,identifier) = Closure( [1141, 1126] ) = {1212, 1141, 1126, 1227, 1356, 1341} ={ declaration_parameter_assign->=expression,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->=expression,; declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I93,declaration_parameter) = Closure( [947, 948, 949, 951, 952, 957, 959, 962, 968, 969, 970, 973, 975, 978, 986] ) = {962, 968, 969, 970, 973, 975, 978, 986, 1571, 1399, 947, 948, 949, 951, 952, 957, 959} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break } = I119

Goto(I94,type_specifier) = Closure( [927, 919, 904, 905, 906, 908, 909, 914, 916, 925, 926, 930, 932, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I94,statement) = Closure( [6730] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 6730, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break statement_list->statementstatement_list,} jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I94
Goto(I94,if) = Closure( [8086, 8087, 8089, 8095, 8100, 8085, 8090, 8097, 8106, 8107, 8108, 8111, 8113, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I94,selection_statement) = Closure( [7074, 7081, 7053, 7054, 7063, 7057, 7058, 7065, 7068, 7075, 7076, 7079, 7084, 7092, 7055] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I94,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I94,{) = Closure( [6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I94,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I94,assignment_expression_list) = Closure( [7397, 7398, 7399, 7401, 7402, 7407, 7409, 7412, 7418, 7419, 7420, 7423, 7425, 7428, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I94,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I94,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I94,iteration_statement) = Closure( [7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7167, 7170, 7178, 7162, 7165] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I94,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I94,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I94,statement_list) = Closure( [6773] ) = {6773} ={ statement_list->statementstatement_list,} } = I120
Goto(I94,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I94,break) = Closure( [7655, 7656, 7657, 7659, 7660, 7665, 7667, 7670, 7676, 7677, 7678, 7681, 7683, 7686, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I94,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I94,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6909, 6912, 6920, 6907] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I94,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I94,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I94,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I94,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I94,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I94,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111

Goto(I95,() = Closure( [8140, 8143, 8149, 8150, 8151, 8154, 8156, 8159, 8128, 8129, 8130, 8132, 8133, 8167, 8138] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4395, 4911, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 8128, 8129, 8130, 8132, 8133, 8138, 8140, 8143, 8149, 8150, 4567, 8151, 8154, 8156, 8159, 1767, 8167, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,) function_expression->identifier(expression_list),) primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; constant_expression->primary_expressionarithmetic_expression,) selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void primary_expression->(expression),* selection_statement->if(expression)statementelsestatement,return primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I121


Goto(I97,type_specifier) = Closure( [904, 905, 906, 908, 909, 914, 916, 919, 925, 927, 926, 930, 932, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I97,statement) = Closure( [6730] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 6730, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break statement_list->statementstatement_list,} jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I94
Goto(I97,if) = Closure( [8085, 8086, 8087, 8089, 8090, 8095, 8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I97,selection_statement) = Closure( [7053, 7054, 7055, 7057, 7058, 7063, 7065, 7068, 7074, 7075, 7076, 7081, 7079, 7084, 7092] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I97,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I97,{) = Closure( [6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I97,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I97,assignment_expression_list) = Closure( [7397, 7398, 7399, 7401, 7402, 7407, 7409, 7412, 7418, 7419, 7420, 7423, 7425, 7428, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I97,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I97,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I97,iteration_statement) = Closure( [7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167, 7170, 7178] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I97,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I97,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I97,statement_list) = Closure( [6580, 6581, 6582, 6584, 6585, 6590, 6592, 6595, 6601, 6602, 6603, 6606, 6608, 6611, 6619] ) = {6592, 6595, 6601, 6602, 6603, 6606, 6608, 6611, 6580, 6581, 6582, 6584, 6585, 6619, 6590} ={ compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},return compound_statement->{statement_list},for } = I122
Goto(I97,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I97,break) = Closure( [7655, 7656, 7657, 7659, 7660, 7665, 7667, 7670, 7676, 7677, 7678, 7681, 7683, 7686, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I97,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I97,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909, 6912, 6920] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I97,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I97,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I97,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I97,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I97,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I97,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111

Goto(I98,;) = Closure( [7468, 7471, 7440, 7441, 7442, 7444, 7445, 7479, 7450, 7452, 7455, 7461, 7462, 7463, 7466] ) = {7461, 7462, 7463, 7466, 7468, 7471, 7440, 7441, 7442, 7444, 7445, 7479, 7450, 7452, 7455} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char } = I123

Goto(I99,,) = Closure( [4065] ) = {4065, 3850, 3835} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, } = I124
Goto(I99,assignment_expression_list_suffix) = Closure( [4323] ) = {4323} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I125


Goto(I101,=) = Closure( [3133, 3096, 3102] ) = {3096, 3133, 3102} ={ assignment_operator->=,number assignment_operator->=,( assignment_operator->=,identifier } = I126
Goto(I101,assignment_operator) = Closure( [3921, 3936] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4394, 4910, 4409, 1595, 4925, 1599, 1603, 1609, 1611, 1612, 1614, 3921, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 3936, 1633, 4480, 4495, 1681, 1685, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4566, 4581, 1767, 1771, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,, function_expression->identifier(expression_list),, expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,, primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; assignment_expression->identifierassignment_operatorexpression,, primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> assignment_expression->identifierassignment_operatorexpression,; primary_expression->identifier,<= expression->function_expression,, expression->function_expression,; primary_expression->number,* primary_expression->number,, primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I127
Goto(I101,/=) = Closure( [3440, 3446, 3477] ) = {3440, 3477, 3446} ={ assignment_operator->/=,number assignment_operator->/=,( assignment_operator->/=,identifier } = I128
Goto(I101,+=) = Closure( [3182, 3188, 3219] ) = {3219, 3188, 3182} ={ assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->+=,number } = I129
Goto(I101,-=) = Closure( [3268, 3274, 3305] ) = {3305, 3274, 3268} ={ assignment_operator->-=,( assignment_operator->-=,identifier assignment_operator->-=,number } = I130
Goto(I101,^=) = Closure( [3649, 3612, 3618] ) = {3649, 3618, 3612} ={ assignment_operator->^=,( assignment_operator->^=,identifier assignment_operator->^=,number } = I131
Goto(I101,&=) = Closure( [3698, 3704, 3735] ) = {3704, 3698, 3735} ={ assignment_operator->&=,identifier assignment_operator->&=,number assignment_operator->&=,( } = I132
Goto(I101,*=) = Closure( [3391, 3354, 3360] ) = {3360, 3354, 3391} ={ assignment_operator->*=,identifier assignment_operator->*=,number assignment_operator->*=,( } = I133
Goto(I101,|=) = Closure( [3784, 3790, 3821] ) = {3784, 3821, 3790} ={ assignment_operator->|=,number assignment_operator->|=,( assignment_operator->|=,identifier } = I134
Goto(I101,%=) = Closure( [3526, 3532, 3563] ) = {3563, 3532, 3526} ={ assignment_operator->%=,( assignment_operator->%=,identifier assignment_operator->%=,number } = I135

Goto(I102,}) = Closure( [6638, 6654, 6624, 6627, 6629, 6649] ) = {6624, 6627, 6629, 6638, 6649, 6654} ={ compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},# compound_statement->{statement_list},char compound_statement->{statement_list},int compound_statement->{statement_list},void } = I136

Goto(I103,() = Closure( [8751, 8752, 8753, 8756, 8758, 8761, 8730, 8731, 8732, 8734, 8735, 8769, 8740, 8742, 8745] ) = {897, 8769, 522, 780, 8730, 8731, 860, 8732, 8734, 8735, 608, 866, 8740, 8742, 8745, 8751, 8752, 8753, 436, 8756, 694, 8758, 8761} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier type_specifier->void,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier type_specifier->double,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while type_specifier->char,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,int type_specifier->float,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void } = I137

Goto(I104,;) = Closure( [7724, 7726, 7729, 7698, 7699, 7700, 7702, 7703, 7737, 7708, 7710, 7713, 7719, 7720, 7721] ) = {7713, 7719, 7720, 7721, 7724, 7726, 7729, 7698, 7699, 7700, 7702, 7703, 7737, 7708, 7710} ={ jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break } = I138




Goto(I108,() = Closure( [8493, 8494, 8495, 8498, 8500, 8503, 8472, 8473, 8474, 8476, 8477, 8511, 8482, 8484, 8487] ) = {1793, 1796, 1797, 1799, 1801, 1805, 8472, 8473, 8474, 8476, 8477, 8482, 8484, 8487, 4395, 8493, 8494, 4911, 8495, 8498, 8500, 8503, 1595, 8511, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char expression->constant_expression,) iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; function_expression->identifier(expression_list),) iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void primary_expression->identifier,* iteration_statement->while(expression)statement,return primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I139


Goto(I110,;) = Closure( [7595, 7597, 7600, 7569, 7570, 7571, 7573, 7574, 7608, 7579, 7581, 7584, 7590, 7591, 7592] ) = {7584, 7590, 7591, 7592, 7595, 7597, 7600, 7569, 7570, 7571, 7573, 7574, 7608, 7579, 7581} ={ jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break } = I140

Goto(I111,expression) = Closure( [7827, 7828, 7829, 7831, 7832, 7837, 7839, 7842, 7848, 7849, 7850, 7853, 7855, 7858, 7866] ) = {7842, 7848, 7849, 7850, 7853, 7855, 7858, 7827, 7828, 7829, 7831, 7832, 7866, 7837, 7839} ={ jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,break } = I141
Goto(I111,constant_expression) = Closure( [4452] ) = {4452} ={ expression->constant_expression,; } = I142
Goto(I111,;) = Closure( [7999, 8000, 8001, 8003, 8004, 8009, 8011, 8014, 8020, 8021, 8022, 8025, 8027, 8030, 8038] ) = {8000, 8001, 8003, 8004, 8038, 8009, 8011, 8014, 8020, 8021, 8022, 8025, 8027, 8030, 7999} ={ jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,return jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void jump_statement->return;,if } = I143
Goto(I111,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I144
Goto(I111,number) = Closure( [1724, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I145
Goto(I111,identifier) = Closure( [1638, 4968, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I146
Goto(I111,function_expression) = Closure( [4538] ) = {4538} ={ expression->function_expression,; } = I147
Goto(I111,primary_expression) = Closure( [4624] ) = {2058, 2316, 2574, 1935, 4624, 2832, 4882, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 2144, 2402, 2660, 2021, 4710, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ operator->-,( operator->%,( operator-><,( operator->+,number constant_expression->primary_expressionarithmetic_expression,; operator->==,( arithmetic_expression->,; operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier operator->*,( operator->^,( operator->>,( operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I148



Goto(I114,,) = Closure( [5169] ) = {4480, 1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4394, 4395, 1707, 4910, 4911, 1710, 5169, 1711, 1713, 1715, 1719, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4566, 4567, 1624, 1625, 1627, 1629, 1633, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ expression->function_expression,, primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,, expression->constant_expression,) primary_expression->number,^ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->number,+ expression_list_suffix->,expressionexpression_list_suffix,) primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I84
Goto(I114,expression_list_suffix) = Closure( [5255] ) = {5255} ={ expression_list_suffix->,expressionexpression_list_suffix,) } = I149


Goto(I116,)) = Closure( [5083, 5082] ) = {5082, 5083} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) } = I150


Goto(I118,arithmetic_expression) = Closure( [4824, 4825] ) = {4824, 4825} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) } = I151
Goto(I118,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I118,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I118,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I118,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I118,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I118,operator) = Closure( [4738, 4739] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4738, 4739, 1681, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->number,* primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I90
Goto(I118,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I118,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I118,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I118,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I118,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I118,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I118,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I118,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I119,,) = Closure( [1442] ) = {1442, 1083, 1098} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I17
Goto(I119,declaration_parameter_suffix) = Closure( [1005, 1011, 1012, 1013, 1016, 1018, 1021, 1029, 990, 991, 992, 994, 995, 1000, 1002] ) = {992, 994, 995, 1029, 1000, 1002, 1005, 1011, 1012, 1013, 1016, 1018, 1021, 990, 991} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float } = I152


Goto(I121,expression) = Closure( [8171, 8172, 8173, 8175, 8176, 8181, 8183, 8186, 8192, 8193, 8194, 8197, 8199, 8202, 8210] ) = {8192, 8193, 8194, 8197, 8199, 8202, 8171, 8172, 8173, 8175, 8176, 8210, 8181, 8183, 8186} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char } = I153
Goto(I121,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I121,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I121,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I121,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I121,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I121,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39

Goto(I122,}) = Closure( [6635, 6638, 6644, 6645, 6646, 6649, 6651, 6654, 6623, 6624, 6625, 6627, 6628, 6662, 6633] ) = {6624, 6625, 6627, 6628, 6662, 6633, 6635, 6638, 6644, 6645, 6646, 6649, 6651, 6654, 6623} ={ compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},if } = I154


Goto(I124,assignment_expression) = Closure( [4108] ) = {4194, 4108, 4022} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I155
Goto(I124,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101



Goto(I127,expression) = Closure( [3964, 3979] ) = {3979, 3964} ={ assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, } = I156
Goto(I127,constant_expression) = Closure( [4437, 4452] ) = {4452, 4437} ={ expression->constant_expression,; expression->constant_expression,, } = I20
Goto(I127,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I21
Goto(I127,number) = Closure( [1724, 1728, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I22
Goto(I127,identifier) = Closure( [4953, 1638, 4968, 1642, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1642, 1676, 1646, 1657, 1652, 1654, 1655, 4953, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,; primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, primary_expression->identifier,< primary_expression->identifier,/ } = I23
Goto(I127,function_expression) = Closure( [4523, 4538] ) = {4538, 4523} ={ expression->function_expression,; expression->function_expression,, } = I24
Goto(I127,primary_expression) = Closure( [4609, 4624] ) = {4609, 4867, 2058, 2316, 2574, 2832, 4624, 4882, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 2144, 2402, 2660, 2918, 4710, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, arithmetic_expression->,, operator->-,( operator->%,( operator-><,( operator->==,( constant_expression->primary_expressionarithmetic_expression,; arithmetic_expression->,; operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->*,( operator->^,( operator->>,( operator-><=,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I25










Goto(I137,type_specifier) = Closure( [940, 903, 909] ) = {903, 1098, 1083, 940, 909} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I157
Goto(I137,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I137,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I137,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I137,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I137,declaration) = Closure( [8812, 8773, 8774, 8775, 8777, 8778, 8783, 8785, 8788, 8794, 8795, 8796, 8799, 8801, 8804] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4409, 1595, 4925, 1603, 8773, 8774, 8775, 1609, 8777, 1611, 1612, 8778, 1614, 8783, 1617, 8785, 1619, 8788, 1621, 1624, 1625, 8794, 1627, 8795, 1629, 8796, 8799, 1633, 8801, 8804, 8812, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ primary_expression->identifier,!= iteration_statement->for(declarationexpression;assignment_expression)statement,double primary_expression->identifier,== primary_expression->identifier,& iteration_statement->for(declarationexpression;assignment_expression)statement,identifier primary_expression->identifier,; iteration_statement->for(declarationexpression;assignment_expression)statement,for primary_expression->identifier,< iteration_statement->for(declarationexpression;assignment_expression)statement,break primary_expression->identifier,/ iteration_statement->for(declarationexpression;assignment_expression)statement,char primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% iteration_statement->for(declarationexpression;assignment_expression)statement,} primary_expression->identifier,- iteration_statement->for(declarationexpression;assignment_expression)statement,; primary_expression->identifier,> iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int primary_expression->identifier,<= iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I158
Goto(I137,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9


Goto(I139,expression) = Closure( [8515, 8516, 8517, 8519, 8520, 8525, 8527, 8530, 8536, 8537, 8538, 8541, 8543, 8546, 8554] ) = {8546, 8515, 8516, 8517, 8519, 8520, 8554, 8525, 8527, 8530, 8536, 8537, 8538, 8541, 8543} ={ iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue } = I159
Goto(I139,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I139,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I139,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I139,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I139,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I139,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I141,;) = Closure( [7885, 7891, 7892, 7893, 7896, 7898, 7901, 7870, 7871, 7872, 7874, 7875, 7909, 7880, 7882] ) = {7872, 7874, 7875, 7909, 7880, 7882, 7885, 7891, 7892, 7893, 7896, 7898, 7901, 7870, 7871} ={ jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void jump_statement->returnexpression;,if jump_statement->returnexpression;,float } = I160



Goto(I144,expression) = Closure( [1853, 1861, 1867, 1869, 1870, 1872, 1875, 1877, 1879, 1882, 1883, 1885, 1887, 1891] ) = {1891, 1861, 1867, 1885, 1869, 1870, 1872, 1875, 1877, 1879, 1882, 1883, 1853, 1887} ={ primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),* primary_expression->(expression),> } = I161
Goto(I144,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I144,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I144,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I144,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I144,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I144,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I146,() = Closure( [5011] ) = {4480, 1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 5011, 1685, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4394, 4395, 1707, 4910, 4911, 1710, 1711, 1713, 1715, 1719, 1595, 1599, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4566, 4567, 1624, 1625, 1627, 1629, 5470, 5341, 1633, 1767, 1771, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ expression->function_expression,, primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* function_expression->identifier(expression_list),; primary_expression->number,, primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,, expression->constant_expression,) primary_expression->number,^ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> expression_list->,) expression_list->expressionexpression_list_suffix,) primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I162


Goto(I148,arithmetic_expression) = Closure( [4667] ) = {4667} ={ constant_expression->primary_expressionarithmetic_expression,; } = I163
Goto(I148,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I148,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I148,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I148,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I148,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I148,operator) = Closure( [4753] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4753, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1595, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I164
Goto(I148,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I148,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I148,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I148,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I148,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I148,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I148,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I148,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55




Goto(I152,;) = Closure( [1035, 1037, 1038, 1072, 1043, 1045, 1048, 1054, 1055, 1056, 1059, 1061, 1064, 1033, 1034] ) = {1056, 1059, 1061, 1064, 1033, 1034, 1035, 1037, 1038, 1072, 1043, 1045, 1048, 1054, 1055} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; } = I165

Goto(I153,)) = Closure( [8235, 8236, 8237, 8240, 8242, 8245, 8214, 8215, 8216, 8218, 8219, 8253, 8224, 8226, 8229] ) = {7040, 7298, 891, 7943, 8072, 522, 3850, 780, 4237, 4366, 8214, 8215, 8216, 8218, 8219, 8224, 8226, 8229, 6954, 8235, 7212, 8236, 8237, 8240, 8242, 436, 8245, 694, 8253, 6868, 7126, 7384, 7513, 7642, 7771, 608, 8416, 8674, 3835, 6524} ={ statement->selection_statement,else statement->declaration,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else jump_statement->return;,else selection_statement->if(expression)statementelsestatement,else type_specifier->int,identifier assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->,; selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char statement->jump_statement,else selection_statement->if(expression)statementelsestatement,} statement->compound_statement,else selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue type_specifier->char,identifier selection_statement->if(expression)statementelsestatement,void type_specifier->float,identifier selection_statement->if(expression)statementelsestatement,return statement->expression_statement,else statement->iteration_statement,else expression_statement->assignment_expression_list;,else jump_statement->continue;,else jump_statement->break;,else jump_statement->returnexpression;,else type_specifier->double,identifier iteration_statement->while(expression)statement,else iteration_statement->for(declarationexpression;assignment_expression)statement,else assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},else } = I166


Goto(I155,,) = Closure( [4065] ) = {4065, 3850, 3835} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, } = I124
Goto(I155,assignment_expression_list_suffix) = Closure( [4151] ) = {4151} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I167


Goto(I157,identifier) = Closure( [1141, 1126] ) = {1212, 1141, 1126, 1227, 1356, 1341} ={ declaration_parameter_assign->=expression,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->=expression,; declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I157,declaration_parameter) = Closure( [946, 983, 952] ) = {946, 1571, 983, 1399, 952} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I168

Goto(I158,expression) = Closure( [8816, 8817, 8818, 8820, 8821, 8826, 8828, 8831, 8837, 8838, 8839, 8842, 8844, 8847, 8855] ) = {8837, 8838, 8839, 8842, 8844, 8847, 8816, 8817, 8818, 8820, 8821, 8855, 8826, 8828, 8831} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I169
Goto(I158,constant_expression) = Closure( [4452] ) = {4452} ={ expression->constant_expression,; } = I142
Goto(I158,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I144
Goto(I158,number) = Closure( [1724, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I145
Goto(I158,identifier) = Closure( [1638, 4968, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I146
Goto(I158,function_expression) = Closure( [4538] ) = {4538} ={ expression->function_expression,; } = I147
Goto(I158,primary_expression) = Closure( [4624] ) = {2058, 2316, 2574, 1935, 4624, 2832, 4882, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 2144, 2402, 2660, 2021, 4710, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ operator->-,( operator->%,( operator-><,( operator->+,number constant_expression->primary_expressionarithmetic_expression,; operator->==,( arithmetic_expression->,; operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier operator->*,( operator->^,( operator->>,( operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I148

Goto(I159,)) = Closure( [8589, 8558, 8559, 8560, 8562, 8563, 8597, 8568, 8570, 8573, 8579, 8580, 8581, 8584, 8586] ) = {7124, 522, 6515, 7182, 7183, 7184, 7025, 7186, 7187, 6516, 6517, 7192, 7194, 7197, 7638, 7203, 7204, 7205, 6520, 7208, 7210, 7213, 6522, 7032, 7221, 7033, 7741, 7742, 7743, 7745, 7746, 7751, 7036, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 694, 6838, 6839, 6840, 6842, 6843, 7354, 7355, 7358, 7359, 7356, 6848, 8386, 8387, 8388, 7364, 8390, 8391, 6850, 7366, 6853, 7369, 8396, 6859, 8398, 7375, 6860, 8401, 7376, 6861, 7377, 6869, 6864, 8407, 8408, 7385, 8409, 7380, 8412, 6877, 7382, 8414, 889, 8417, 7393, 884, 7913, 7914, 7915, 8425, 7917, 7918, 6866, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 871, 6945, 6946, 6947, 6950, 6952, 873, 6955, 887, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 882, 7511, 7514, 883, 861, 6494, 862, 6495, 865, 866, 7010, 7011, 863, 6496, 7012, 7014, 6498, 8042, 8043, 8044, 7015, 8558, 8559, 8560, 8046, 8562, 8047, 8563, 7020, 8052, 7022, 8568, 8054, 8570, 8057, 892, 6525, 8573, 7031, 8063, 7041, 8064, 8579, 900, 6533, 8580, 8065, 8581, 8073, 7049, 8068, 8584, 8589, 8070, 8586, 8081, 8597, 436, 7096, 7097, 7098, 6499, 7100, 7101, 7614, 7612, 7613, 7617, 7616, 7106, 8644, 8645, 8646, 7622, 8648, 8649, 7108, 7624, 7111, 7627, 8654, 7117, 8656, 7633, 7634, 8659, 6504, 7118, 7522, 7127, 7119, 8665, 8666, 7643, 7635, 8667, 6506, 7135, 8670, 7640, 8672, 8675, 7651, 8683, 6509, 7122} ={ statement->iteration_statement,continue type_specifier->int,identifier compound_statement->{statement_list},} statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->selection_statement,char statement->compound_statement,double statement->compound_statement,identifier compound_statement->{statement_list},; compound_statement->{statement_list},while statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char jump_statement->break;,int statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while compound_statement->{statement_list},int statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void compound_statement->{statement_list},continue statement->selection_statement,; statement->compound_statement,return statement->selection_statement,while jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for statement->selection_statement,int jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,{ statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier statement->expression_statement,break expression_statement->assignment_expression_list;,break statement->expression_statement,char expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} statement->expression_statement,; iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,; statement->expression_statement,while expression_statement->assignment_expression_list;,while statement->expression_statement,void statement->expression_statement,int iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while expression_statement->assignment_expression_list;,int iteration_statement->while(expression)statement,int statement->expression_statement,return expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->while(expression)statement,void expression_statement->assignment_expression_list;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ iteration_statement->while(expression)statement,return jump_statement->return;,double jump_statement->return;,identifier statement->expression_statement,continue jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement->jump_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ compound_statement->{statement_list},{ statement->selection_statement,{ statement->selection_statement,double compound_statement->{statement_list},double selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ statement->selection_statement,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ selection_statement->if(expression)statementelsestatement,double iteration_statement->while(expression)statement,double selection_statement->if(expression)statementelsestatement,identifier iteration_statement->while(expression)statement,identifier statement->selection_statement,for selection_statement->if(expression)statementelsestatement,for statement->selection_statement,break iteration_statement->while(expression)statement,for selection_statement->if(expression)statementelsestatement,break iteration_statement->while(expression)statement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},void iteration_statement->while(expression)statement,char statement->selection_statement,} selection_statement->if(expression)statementelsestatement,} statement->selection_statement,void selection_statement->if(expression)statementelsestatement,; iteration_statement->while(expression)statement,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return compound_statement->{statement_list},return iteration_statement->while(expression)statement,; selection_statement->if(expression)statementelsestatement,while iteration_statement->while(expression)statement,while selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,int iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,void selection_statement->if(expression)statementelsestatement,continue iteration_statement->while(expression)statement,continue selection_statement->if(expression)statementelsestatement,return iteration_statement->while(expression)statement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ compound_statement->{statement_list},identifier statement->iteration_statement,double statement->iteration_statement,identifier jump_statement->break;,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,identifier jump_statement->break;,double statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier statement->iteration_statement,break jump_statement->break;,break statement->iteration_statement,char jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; iteration_statement->for(declarationexpression;assignment_expression)statement,char compound_statement->{statement_list},for statement->iteration_statement,; jump_statement->continue;,return statement->iteration_statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,while compound_statement->{statement_list},break statement->iteration_statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,return compound_statement->{statement_list},char statement->iteration_statement,int } = I170


Goto(I161,)) = Closure( [1934, 1904, 1910, 1928, 1912, 1913, 1915, 1918, 1920, 1922, 1925, 1926, 1896, 1930] ) = {1920, 1922, 1925, 1926, 1928, 1896, 1930, 1934, 1904, 1910, 1912, 1913, 1915, 1918} ={ primary_expression->(expression),/ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< } = I171

Goto(I162,expression) = Closure( [5384] ) = {5384, 5298, 5126} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I67
Goto(I162,constant_expression) = Closure( [4437, 4438] ) = {4437, 4438} ={ expression->constant_expression,, expression->constant_expression,) } = I68
Goto(I162,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1814, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),, primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I69
Goto(I162,expression_list) = Closure( [5054] ) = {5054} ={ function_expression->identifier(expression_list),; } = I172
Goto(I162,number) = Closure( [1724, 1728, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1728, 1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,, primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I71
Goto(I162,identifier) = Closure( [4953, 4954, 1638, 1642, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1642, 1643, 1676, 1646, 1652, 1654, 1655, 4953, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,, primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I72
Goto(I162,function_expression) = Closure( [4523, 4524] ) = {4523, 4524} ={ expression->function_expression,, expression->function_expression,) } = I73
Goto(I162,primary_expression) = Closure( [4609, 4610] ) = {4609, 4610, 4867, 4868, 2058, 2316, 2574, 2832, 2107, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4695, 4696, 2144, 2402, 2660, 2918, 1935, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 3004, 2021, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,, arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->==,( operator->*,number operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator-><=,( operator->+,number operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->>=,( operator->-,number operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I74


Goto(I164,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I144
Goto(I164,number) = Closure( [1724, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I145
Goto(I164,identifier) = Closure( [1638, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I173
Goto(I164,primary_expression) = Closure( [4796] ) = {2058, 2316, 2574, 1935, 2832, 2193, 4882, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 4796, 2365, 3004, 2623, 2113, 2881, 2371, 2629, 2887, 2144, 2402, 2660, 2021, 4710, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number arithmetic_expression->,; operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->^,number operator->>=,( operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier operator->*,( operator->^,( operator->>,( operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I174


Goto(I166,type_specifier) = Closure( [934] ) = {1098, 1083, 934} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I175
Goto(I166,statement) = Closure( [8257, 8258, 8259, 8261, 8262, 8267, 8269, 8272, 8278, 8279, 8280, 8283, 8285, 8288, 8296] ) = {8288, 8257, 8258, 8259, 8261, 8262, 8296, 8267, 8269, 8272, 8278, 8279, 8280, 8283, 8285} ={ selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue } = I176
Goto(I166,if) = Closure( [8115] ) = {8115} ={ selection_statement->if(expression)statementelsestatement,else } = I177
Goto(I166,selection_statement) = Closure( [7083] ) = {7083} ={ statement->selection_statement,else } = I178
Goto(I166,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I166,{) = Closure( [6567] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 6567, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return compound_statement->{statement_list},else type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I179
Goto(I166,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I166,assignment_expression_list) = Closure( [7427] ) = {7427} ={ expression_statement->assignment_expression_list;,else } = I180
Goto(I166,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I166,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I166,iteration_statement) = Closure( [7169] ) = {7169} ={ statement->iteration_statement,else } = I181
Goto(I166,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I166,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I166,for) = Closure( [8717] ) = {8717} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I182
Goto(I166,break) = Closure( [7685] ) = {7685} ={ jump_statement->break;,else } = I183
Goto(I166,declaration) = Closure( [7341] ) = {7341} ={ statement->declaration,else } = I184
Goto(I166,expression_statement) = Closure( [6911] ) = {6911} ={ statement->expression_statement,else } = I185
Goto(I166,compound_statement) = Closure( [7255] ) = {7255} ={ statement->compound_statement,else } = I186
Goto(I166,while) = Closure( [8459] ) = {8459} ={ iteration_statement->while(expression)statement,else } = I187
Goto(I166,jump_statement) = Closure( [6997] ) = {6997} ={ statement->jump_statement,else } = I188
Goto(I166,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I166,continue) = Closure( [7556] ) = {7556} ={ jump_statement->continue;,else } = I189
Goto(I166,return) = Closure( [7986, 7814] ) = {1793, 1796, 1797, 7814, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 7986, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% jump_statement->returnexpression;,else primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- jump_statement->return;,else primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I190


Goto(I168,,) = Closure( [1442] ) = {1442, 1083, 1098} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I17
Goto(I168,declaration_parameter_suffix) = Closure( [989, 1026, 995] ) = {1026, 995, 989} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number } = I191

Goto(I169,;) = Closure( [8880, 8881, 8882, 8885, 8887, 8890, 8859, 8860, 8861, 8863, 8864, 8898, 8869, 8871, 8874] ) = {8864, 8860, 8898, 8869, 8871, 8874, 8880, 8881, 8882, 8885, 8887, 8890, 8859, 3836, 8861, 8863} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if assignment_expression->identifierassignment_operatorexpression,) iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double } = I192

Goto(I170,type_specifier) = Closure( [932, 927, 914, 916, 930, 919, 925, 926, 904, 905, 908, 909, 906, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I170,statement) = Closure( [8601, 8602, 8603, 8605, 8606, 8611, 8613, 8616, 8622, 8623, 8624, 8627, 8632, 8629, 8640] ) = {8640, 8611, 8613, 8616, 8622, 8623, 8624, 8627, 8629, 8632, 8601, 8602, 8603, 8605, 8606} ={ iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier } = I193
Goto(I170,if) = Closure( [8085, 8086, 8087, 8089, 8090, 8095, 8097, 8100, 8106, 8107, 8108, 8116, 8111, 8113, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I170,selection_statement) = Closure( [7068, 7075, 7076, 7079, 7081, 7053, 7054, 7055, 7057, 7058, 7063, 7065, 7074, 7084, 7092] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I170,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I170,{) = Closure( [6558, 6559, 6560, 6563, 6565, 6537, 6538, 6539, 6541, 6568, 6576, 6542, 6547, 6549, 6552] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I170,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I170,assignment_expression_list) = Closure( [7397, 7398, 7401, 7402, 7399, 7407, 7409, 7412, 7418, 7419, 7420, 7428, 7423, 7425, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I170,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I170,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I170,iteration_statement) = Closure( [7167, 7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7170, 7162, 7178, 7165] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I170,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I170,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I170,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I170,break) = Closure( [7681, 7657, 7655, 7656, 7660, 7659, 7665, 7667, 7670, 7676, 7677, 7686, 7678, 7683, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I170,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I170,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6912, 6907, 6920, 6909] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I170,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I170,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I170,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I170,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I170,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I170,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111


Goto(I172,)) = Closure( [5097] ) = {5097} ={ function_expression->identifier(expression_list),; } = I194


Goto(I174,arithmetic_expression) = Closure( [4839] ) = {4839} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,; } = I195
Goto(I174,*) = Closure( [2150, 2156, 2187] ) = {2187, 2156, 2150} ={ operator->*,( operator->*,identifier operator->*,number } = I42
Goto(I174,!=) = Closure( [2752, 2758, 2789] ) = {2752, 2789, 2758} ={ operator->!=,number operator->!=,( operator->!=,identifier } = I43
Goto(I174,/) = Closure( [2236, 2242, 2273] ) = {2273, 2242, 2236} ={ operator->/,( operator->/,identifier operator->/,number } = I44
Goto(I174,+) = Closure( [1978, 1984, 2015] ) = {1984, 1978, 2015} ={ operator->+,identifier operator->+,number operator->+,( } = I45
Goto(I174,-) = Closure( [2101, 2064, 2070] ) = {2064, 2101, 2070} ={ operator->-,number operator->-,( operator->-,identifier } = I46
Goto(I174,operator) = Closure( [4753] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4753, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 1595, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I164
Goto(I174,>) = Closure( [2666, 2672, 2703] ) = {2672, 2666, 2703} ={ operator->>,identifier operator->>,number operator->>,( } = I48
Goto(I174,<=) = Closure( [2924, 2930, 2961] ) = {2961, 2930, 2924} ={ operator-><=,( operator-><=,identifier operator-><=,number } = I49
Goto(I174,>=) = Closure( [3010, 3016, 3047] ) = {3016, 3010, 3047} ={ operator->>=,identifier operator->>=,number operator->>=,( } = I50
Goto(I174,==) = Closure( [2875, 2838, 2844] ) = {2875, 2844, 2838} ={ operator->==,( operator->==,identifier operator->==,number } = I51
Goto(I174,&) = Closure( [2494, 2500, 2531] ) = {2531, 2500, 2494} ={ operator->&,( operator->&,identifier operator->&,number } = I52
Goto(I174,<) = Closure( [2617, 2580, 2586] ) = {2617, 2586, 2580} ={ operator-><,( operator-><,identifier operator-><,number } = I53
Goto(I174,^) = Closure( [2408, 2414, 2445] ) = {2408, 2445, 2414} ={ operator->^,number operator->^,( operator->^,identifier } = I54
Goto(I174,%) = Closure( [2359, 2322, 2328] ) = {2328, 2322, 2359} ={ operator->%,identifier operator->%,number operator->%,( } = I55

Goto(I175,identifier) = Closure( [1141, 1126] ) = {1212, 1141, 1126, 1227, 1356, 1341} ={ declaration_parameter_assign->=expression,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->=expression,; declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I175,declaration_parameter) = Closure( [977] ) = {977, 1571, 1399} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I196

Goto(I176,else) = Closure( [8331, 8300, 8301, 8302, 8304, 8305, 8339, 8310, 8312, 8315, 8321, 8322, 8323, 8326, 8328] ) = {7124, 522, 7182, 7183, 7184, 6516, 7186, 7187, 6517, 7192, 7194, 7197, 7203, 7204, 7205, 6520, 7208, 7210, 7213, 6522, 7221, 7033, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 8300, 8301, 8302, 7278, 8304, 8305, 7280, 7283, 8310, 8312, 7289, 7290, 8315, 7291, 7294, 7296, 8321, 8322, 7299, 8323, 8326, 8328, 8331, 7307, 4237, 8339, 694, 6838, 6839, 6840, 6842, 6843, 7354, 7355, 7358, 7359, 7356, 6848, 8386, 8387, 8388, 7364, 8390, 8391, 6850, 7366, 6853, 7369, 8396, 6859, 8398, 7375, 6860, 8401, 7376, 6861, 7377, 6869, 6864, 8407, 8408, 7385, 8409, 7380, 8412, 6877, 7382, 8414, 889, 8417, 7393, 884, 7913, 7914, 7915, 8425, 7917, 7918, 6866, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 871, 6945, 6946, 6947, 6950, 6952, 873, 6955, 887, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 883, 861, 6494, 862, 6495, 865, 866, 7010, 7011, 863, 6496, 7012, 6498, 6499, 8042, 8043, 8044, 7014, 8046, 8047, 7015, 6504, 7020, 6506, 8052, 7022, 8054, 7025, 882, 8057, 6515, 7031, 892, 6525, 7032, 8063, 8064, 7041, 8065, 7036, 900, 6533, 8068, 8070, 8073, 7049, 8081, 436, 7096, 7097, 7098, 7100, 7101, 7614, 7612, 7613, 7617, 7616, 7106, 8644, 8645, 8646, 7622, 8648, 8649, 7108, 7624, 7111, 7627, 8654, 7117, 8656, 7633, 7634, 8659, 7118, 7119, 7522, 7127, 7635, 8665, 8666, 7643, 8667, 7638, 8670, 7135, 7640, 8672, 8675, 7651, 8683, 6509, 7122} ={ statement->iteration_statement,continue type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ compound_statement->{statement_list},; statement->compound_statement,double statement->compound_statement,identifier compound_statement->{statement_list},while statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while compound_statement->{statement_list},int statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void compound_statement->{statement_list},continue statement->compound_statement,return statement->selection_statement,while jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ statement->declaration,for selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier statement->declaration,break statement->declaration,char selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break statement->declaration,} statement->declaration,; selection_statement->if(expression)statementelsestatement,char statement->declaration,while statement->declaration,int statement->declaration,continue selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; statement->declaration,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; selection_statement->if(expression)statementelsestatement,return type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,{ statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier statement->expression_statement,break expression_statement->assignment_expression_list;,break statement->expression_statement,char expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} statement->expression_statement,; iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,; statement->expression_statement,while expression_statement->assignment_expression_list;,while statement->expression_statement,void statement->expression_statement,int iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while expression_statement->assignment_expression_list;,int iteration_statement->while(expression)statement,int statement->expression_statement,return expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->while(expression)statement,void expression_statement->assignment_expression_list;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ iteration_statement->while(expression)statement,return jump_statement->return;,double jump_statement->return;,identifier statement->expression_statement,continue jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement->jump_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ compound_statement->{statement_list},{ statement->selection_statement,{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ statement->selection_statement,double selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,identifier compound_statement->{statement_list},for statement->selection_statement,for compound_statement->{statement_list},break selection_statement->if(expression)statementelsestatement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,break statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,char compound_statement->{statement_list},} statement->selection_statement,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},void statement->selection_statement,; selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; statement->selection_statement,void selection_statement->if(expression)statementelsestatement,while statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier jump_statement->break;,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,identifier jump_statement->break;,double statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier statement->iteration_statement,break jump_statement->break;,break statement->iteration_statement,char jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,; statement->iteration_statement,while jump_statement->continue;,return statement->iteration_statement,void jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while jump_statement->break;,int iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,return jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,return compound_statement->{statement_list},char statement->iteration_statement,int } = I197

Goto(I177,() = Closure( [8158] ) = {1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4395, 1707, 1710, 4911, 1711, 1713, 1715, 1719, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4567, 1624, 1625, 1627, 1629, 8158, 1633, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,) primary_expression->number,^ primary_expression->number,+ function_expression->identifier(expression_list),) primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> selection_statement->if(expression)statementelsestatement,else primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I198


Goto(I179,type_specifier) = Closure( [927, 919, 904, 905, 906, 908, 909, 914, 916, 925, 926, 930, 932, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I179,statement) = Closure( [6730] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 6730, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break statement_list->statementstatement_list,} jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I94
Goto(I179,if) = Closure( [8086, 8087, 8089, 8095, 8100, 8085, 8090, 8097, 8106, 8107, 8108, 8111, 8113, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I179,selection_statement) = Closure( [7074, 7081, 7053, 7054, 7063, 7057, 7058, 7065, 7068, 7075, 7076, 7079, 7084, 7092, 7055] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I179,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I179,{) = Closure( [6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I179,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I179,assignment_expression_list) = Closure( [7397, 7398, 7399, 7401, 7402, 7407, 7409, 7412, 7418, 7419, 7420, 7423, 7425, 7428, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I179,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I179,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I179,iteration_statement) = Closure( [7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7167, 7170, 7178, 7162, 7165] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I179,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I179,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I179,statement_list) = Closure( [6610] ) = {6610} ={ compound_statement->{statement_list},else } = I199
Goto(I179,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I179,break) = Closure( [7655, 7656, 7657, 7659, 7660, 7665, 7667, 7670, 7676, 7677, 7678, 7681, 7683, 7686, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I179,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I179,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6909, 6912, 6920, 6907] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I179,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I179,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I179,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I179,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I179,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I179,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111

Goto(I180,;) = Closure( [7470] ) = {7470} ={ expression_statement->assignment_expression_list;,else } = I200


Goto(I182,() = Closure( [8760] ) = {608, 897, 866, 522, 780, 436, 694, 8760, 860} ={ type_specifier->double,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier type_specifier->int,identifier type_specifier->void,identifier type_specifier->char,identifier type_specifier->float,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number } = I201

Goto(I183,;) = Closure( [7728] ) = {7728} ={ jump_statement->break;,else } = I202




Goto(I187,() = Closure( [8502] ) = {1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4395, 1707, 1710, 4911, 1711, 1713, 1715, 8502, 1719, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 4567, 1624, 1625, 1627, 1629, 1633, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,) primary_expression->number,^ primary_expression->number,+ function_expression->identifier(expression_list),) primary_expression->number,% primary_expression->number,- primary_expression->number,> iteration_statement->while(expression)statement,else primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I203


Goto(I189,;) = Closure( [7599] ) = {7599} ={ jump_statement->continue;,else } = I204

Goto(I190,expression) = Closure( [7857] ) = {7857} ={ jump_statement->returnexpression;,else } = I205
Goto(I190,constant_expression) = Closure( [4452] ) = {4452} ={ expression->constant_expression,; } = I142
Goto(I190,;) = Closure( [8029] ) = {8029} ={ jump_statement->return;,else } = I206
Goto(I190,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I144
Goto(I190,number) = Closure( [1724, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I145
Goto(I190,identifier) = Closure( [1638, 4968, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I146
Goto(I190,function_expression) = Closure( [4538] ) = {4538} ={ expression->function_expression,; } = I147
Goto(I190,primary_expression) = Closure( [4624] ) = {2058, 2316, 2574, 1935, 4624, 2832, 4882, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 2144, 2402, 2660, 2021, 4710, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ operator->-,( operator->%,( operator-><,( operator->+,number constant_expression->primary_expressionarithmetic_expression,; operator->==,( arithmetic_expression->,; operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier operator->*,( operator->^,( operator->>,( operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I148

Goto(I191,;) = Closure( [1069, 1038, 1032] ) = {1032, 1069, 1038} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I207

Goto(I192,assignment_expression) = Closure( [8907, 8903, 8941, 8912, 8914, 8917, 8923, 8924, 8925, 8928, 8930, 8933, 8902, 8904, 8906] ) = {8928, 8930, 8933, 8902, 8903, 8904, 8906, 8907, 8941, 8912, 8914, 8917, 8923, 8924, 8925} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while } = I208
Goto(I192,identifier) = Closure( [3879] ) = {3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3879, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575, 3262} ={ assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,) assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier assignment_operator->-=,( } = I209




Goto(I196,,) = Closure( [1442] ) = {1442, 1083, 1098} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I17
Goto(I196,declaration_parameter_suffix) = Closure( [1020] ) = {1020} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I210

Goto(I197,type_specifier) = Closure( [932, 927, 914, 916, 930, 919, 926, 904, 905, 908, 909, 906, 925, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I197,statement) = Closure( [8343, 8344, 8345, 8347, 8348, 8353, 8355, 8358, 8364, 8365, 8366, 8369, 8371, 8374, 8382] ) = {8353, 8355, 8358, 8364, 8365, 8366, 8369, 8371, 8374, 8343, 8344, 8345, 8347, 8348, 8382} ={ selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return } = I211
Goto(I197,if) = Closure( [8085, 8086, 8087, 8089, 8090, 8095, 8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I197,selection_statement) = Closure( [7076, 7081, 7053, 7054, 7055, 7057, 7058, 7063, 7065, 7068, 7074, 7075, 7084, 7079, 7092] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I197,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I197,{) = Closure( [6559, 6560, 6563, 6565, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6558, 6568, 6576, 6552] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I197,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I197,assignment_expression_list) = Closure( [7397, 7398, 7401, 7402, 7399, 7407, 7409, 7412, 7418, 7419, 7420, 7428, 7423, 7425, 7436] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I197,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I197,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I197,iteration_statement) = Closure( [7167, 7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7161, 7162, 7170, 7178, 7165] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I197,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I197,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I197,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I197,break) = Closure( [7657, 7655, 7656, 7660, 7659, 7665, 7667, 7670, 7676, 7677, 7678, 7686, 7681, 7683, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I197,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I197,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6903, 6904, 6912, 6907, 6920, 6909] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I197,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I197,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8452, 8455, 8457, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I197,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I197,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I197,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I197,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111

Goto(I198,expression) = Closure( [8201] ) = {8201} ={ selection_statement->if(expression)statementelsestatement,else } = I212
Goto(I198,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I198,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I198,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I198,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I198,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I198,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39

Goto(I199,}) = Closure( [6653] ) = {6653} ={ compound_statement->{statement_list},else } = I213


Goto(I201,type_specifier) = Closure( [940, 909, 903] ) = {903, 1098, 1083, 940, 909} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I157
Goto(I201,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I201,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I201,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I201,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I201,declaration) = Closure( [8803] ) = {1793, 1796, 1797, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 8803, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= iteration_statement->for(declarationexpression;assignment_expression)statement,else constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I214
Goto(I201,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9


Goto(I203,expression) = Closure( [8545] ) = {8545} ={ iteration_statement->while(expression)statement,else } = I215
Goto(I203,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I203,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I203,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I203,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I203,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I203,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I205,;) = Closure( [7900] ) = {7900} ={ jump_statement->returnexpression;,else } = I216



Goto(I208,)) = Closure( [8971, 8973, 8976, 8945, 8946, 8947, 8949, 8950, 8984, 8955, 8957, 8960, 8966, 8967, 8968] ) = {522, 6515, 7182, 7183, 7184, 7025, 7186, 7187, 6516, 7635, 6517, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7032, 7221, 7033, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 694, 6838, 6839, 6840, 6842, 7354, 7355, 7356, 7358, 6843, 7359, 6848, 8386, 8387, 8388, 7364, 8390, 8391, 6850, 7366, 6853, 7369, 8396, 6859, 8398, 7375, 6864, 8401, 6866, 6860, 7380, 6869, 7382, 8407, 7376, 7385, 8408, 6861, 8412, 6877, 8414, 8409, 8417, 7393, 884, 7913, 7914, 7915, 8425, 7917, 7918, 8945, 8946, 8947, 7923, 8949, 8950, 7925, 7928, 3835, 8955, 8957, 7934, 7935, 8960, 7936, 7377, 7939, 7941, 8966, 8967, 7944, 8968, 3850, 8971, 780, 8973, 4366, 6924, 8976, 6925, 6926, 6928, 6929, 7952, 6934, 8984, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 873, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 882, 7511, 7514, 883, 861, 6494, 862, 6495, 865, 7010, 7011, 863, 6496, 7012, 7014, 6498, 866, 8042, 8043, 8044, 7015, 8046, 8047, 871, 6504, 7020, 6506, 8052, 7022, 8054, 887, 6520, 889, 6522, 8057, 892, 7036, 7038, 6525, 7031, 7041, 8063, 8064, 8068, 900, 8070, 6533, 8065, 8073, 7049, 8081, 436, 7096, 7097, 7098, 6499, 7100, 7612, 7614, 7613, 7616, 7617, 7101, 7106, 8644, 8645, 8646, 7622, 8648, 8649, 7108, 7624, 7111, 7627, 8654, 7117, 8656, 7633, 7122, 8659, 7124, 7634, 7638, 7127, 7640, 7522, 8665, 7643, 8666, 8667, 8670, 7135, 8672, 8675, 7651, 7118, 7119, 8683, 6509} ={ type_specifier->int,identifier compound_statement->{statement_list},} statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->selection_statement,char statement->compound_statement,double statement->compound_statement,identifier compound_statement->{statement_list},; jump_statement->break;,while compound_statement->{statement_list},while statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,; statement->compound_statement,return statement->selection_statement,while jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double statement->expression_statement,identifier expression_statement->assignment_expression_list;,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier statement->expression_statement,break expression_statement->assignment_expression_list;,break statement->expression_statement,char expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} statement->expression_statement,int iteration_statement->while(expression)statement,char statement->expression_statement,continue statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,void expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,; statement->expression_statement,while iteration_statement->while(expression)statement,int statement->expression_statement,return iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,void expression_statement->assignment_expression_list;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ iteration_statement->while(expression)statement,return jump_statement->return;,double jump_statement->return;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->return;,for iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->return;,} jump_statement->return;,; iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->return;,while expression_statement->assignment_expression_list;,while jump_statement->return;,int jump_statement->return;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->return;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while assignment_expression->identifierassignment_operatorexpression,; iteration_statement->for(declarationexpression;assignment_expression)statement,int type_specifier->void,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,continue assignment_expression_list->,; statement->jump_statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double statement->selection_statement,if statement->selection_statement,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ compound_statement->{statement_list},{ statement->selection_statement,{ statement->selection_statement,double compound_statement->{statement_list},double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ statement->selection_statement,identifier selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for compound_statement->{statement_list},for statement->selection_statement,for compound_statement->{statement_list},break selection_statement->if(expression)statementelsestatement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int compound_statement->{statement_list},int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue compound_statement->{statement_list},continue selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->selection_statement,int statement->selection_statement,continue compound_statement->{statement_list},void statement->selection_statement,} statement->selection_statement,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,continue compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ compound_statement->{statement_list},identifier statement->iteration_statement,double jump_statement->break;,if jump_statement->break;,{ jump_statement->break;,float jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier statement->iteration_statement,break jump_statement->break;,break statement->iteration_statement,char jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} statement->iteration_statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,continue jump_statement->break;,; jump_statement->break;,int statement->iteration_statement,void jump_statement->break;,continue jump_statement->continue;,return iteration_statement->for(declarationexpression;assignment_expression)statement,} jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void jump_statement->break;,return statement->iteration_statement,; statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return compound_statement->{statement_list},char } = I217

Goto(I209,=) = Closure( [3133, 3096, 3102] ) = {3096, 3133, 3102} ={ assignment_operator->=,number assignment_operator->=,( assignment_operator->=,identifier } = I126
Goto(I209,assignment_operator) = Closure( [3922] ) = {1793, 4481, 1796, 1797, 1799, 1801, 1805, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 4395, 1707, 1710, 4911, 1711, 1713, 1715, 1719, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 3922, 1619, 1621, 4567, 1624, 1625, 1627, 1629, 1633, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ expression->function_expression,) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ expression->constant_expression,) primary_expression->number,^ primary_expression->number,+ function_expression->identifier(expression_list),) primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< assignment_expression->identifierassignment_operatorexpression,) primary_expression->identifier,/ primary_expression->identifier,^ constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I218
Goto(I209,/=) = Closure( [3440, 3446, 3477] ) = {3440, 3477, 3446} ={ assignment_operator->/=,number assignment_operator->/=,( assignment_operator->/=,identifier } = I128
Goto(I209,+=) = Closure( [3182, 3188, 3219] ) = {3219, 3188, 3182} ={ assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->+=,number } = I129
Goto(I209,-=) = Closure( [3268, 3274, 3305] ) = {3305, 3274, 3268} ={ assignment_operator->-=,( assignment_operator->-=,identifier assignment_operator->-=,number } = I130
Goto(I209,^=) = Closure( [3649, 3612, 3618] ) = {3649, 3618, 3612} ={ assignment_operator->^=,( assignment_operator->^=,identifier assignment_operator->^=,number } = I131
Goto(I209,&=) = Closure( [3698, 3704, 3735] ) = {3704, 3698, 3735} ={ assignment_operator->&=,identifier assignment_operator->&=,number assignment_operator->&=,( } = I132
Goto(I209,*=) = Closure( [3391, 3354, 3360] ) = {3360, 3354, 3391} ={ assignment_operator->*=,identifier assignment_operator->*=,number assignment_operator->*=,( } = I133
Goto(I209,|=) = Closure( [3821, 3784, 3790] ) = {3784, 3821, 3790} ={ assignment_operator->|=,number assignment_operator->|=,( assignment_operator->|=,identifier } = I134
Goto(I209,%=) = Closure( [3563, 3526, 3532] ) = {3563, 3532, 3526} ={ assignment_operator->%=,( assignment_operator->%=,identifier assignment_operator->%=,number } = I135

Goto(I210,;) = Closure( [1063] ) = {1063} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I219


Goto(I212,)) = Closure( [8244] ) = {7040, 7298, 7943, 8072, 522, 3850, 780, 4237, 4366, 6868, 7126, 7384, 7513, 7642, 7771, 3835, 608, 8416, 8674, 6954, 7212, 8244, 436, 694, 891, 6524} ={ statement->selection_statement,else statement->declaration,else jump_statement->return;,else selection_statement->if(expression)statementelsestatement,else type_specifier->int,identifier assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->,; statement->expression_statement,else statement->iteration_statement,else expression_statement->assignment_expression_list;,else jump_statement->continue;,else jump_statement->break;,else jump_statement->returnexpression;,else assignment_expression->identifierassignment_operatorexpression,, type_specifier->double,identifier iteration_statement->while(expression)statement,else iteration_statement->for(declarationexpression;assignment_expression)statement,else statement->jump_statement,else statement->compound_statement,else selection_statement->if(expression)statementelsestatement,else type_specifier->char,identifier type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else compound_statement->{statement_list},else } = I220


Goto(I214,expression) = Closure( [8846] ) = {8846} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I221
Goto(I214,constant_expression) = Closure( [4452] ) = {4452} ={ expression->constant_expression,; } = I142
Goto(I214,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1818, 1824, 1826, 1827, 1829, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I144
Goto(I214,number) = Closure( [1724, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1762, 1756, 1732, 1738, 1740, 1741, 1743, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I145
Goto(I214,identifier) = Closure( [1638, 4968, 1646, 1652, 1654, 1655, 1657, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 4968, 1672, 1676, 1646, 1652, 1654, 1655, 1657, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- function_expression->identifier(expression_list),; primary_expression->identifier,> primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ } = I146
Goto(I214,function_expression) = Closure( [4538] ) = {4538} ={ expression->function_expression,; } = I147
Goto(I214,primary_expression) = Closure( [4624] ) = {2058, 2316, 2574, 1935, 4624, 2832, 4882, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 2144, 2402, 2660, 2021, 4710, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ operator->-,( operator->%,( operator-><,( operator->+,number constant_expression->primary_expressionarithmetic_expression,; operator->==,( arithmetic_expression->,; operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier operator->*,( operator->^,( operator->>,( operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I148

Goto(I215,)) = Closure( [8588] ) = {7040, 7298, 7943, 8072, 522, 3850, 780, 8588, 4237, 4366, 6868, 7126, 7384, 7513, 7642, 7771, 3835, 608, 8416, 8674, 6954, 7212, 436, 694, 891, 6524} ={ statement->selection_statement,else statement->declaration,else jump_statement->return;,else selection_statement->if(expression)statementelsestatement,else type_specifier->int,identifier assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier iteration_statement->while(expression)statement,else assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->,; statement->expression_statement,else statement->iteration_statement,else expression_statement->assignment_expression_list;,else jump_statement->continue;,else jump_statement->break;,else jump_statement->returnexpression;,else assignment_expression->identifierassignment_operatorexpression,, type_specifier->double,identifier iteration_statement->while(expression)statement,else iteration_statement->for(declarationexpression;assignment_expression)statement,else statement->jump_statement,else statement->compound_statement,else type_specifier->char,identifier type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else compound_statement->{statement_list},else } = I222


Goto(I217,type_specifier) = Closure( [927, 916, 919, 925, 926, 904, 905, 908, 906, 909, 914, 930, 932, 935, 943] ) = {904, 905, 1098, 906, 908, 909, 914, 916, 919, 925, 926, 927, 930, 932, 935, 943, 1083} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration_parameter->identifierdeclaration_parameter_assign,, } = I93
Goto(I217,statement) = Closure( [8988, 8989, 8990, 8992, 8993, 8998, 9000, 9003, 9009, 9010, 9011, 9014, 9016, 9019, 9027] ) = {8992, 8993, 9027, 8998, 9000, 9003, 9009, 9010, 9011, 9014, 9016, 9019, 8988, 8989, 8990} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ } = I223
Goto(I217,if) = Closure( [8085, 8086, 8087, 8089, 8090, 8095, 8097, 8100, 8106, 8107, 8111, 8113, 8108, 8116, 8124] ) = {8097, 8100, 8106, 8107, 8108, 8111, 8113, 8116, 8085, 8086, 8087, 8089, 8090, 8124, 8095} ={ selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for } = I95
Goto(I217,selection_statement) = Closure( [7068, 7075, 7076, 7053, 7054, 7055, 7057, 7058, 7063, 7065, 7079, 7081, 7074, 7084, 7092] ) = {7074, 7075, 7076, 7079, 7081, 7084, 7053, 7054, 7055, 7057, 7058, 7092, 7063, 7065, 7068} ={ statement->selection_statement,} statement->selection_statement,; statement->selection_statement,while statement->selection_statement,int statement->selection_statement,continue statement->selection_statement,void statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double statement->selection_statement,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,break statement->selection_statement,char } = I96
Goto(I217,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I217,{) = Closure( [6558, 6559, 6560, 6537, 6538, 6539, 6541, 6547, 6549, 6563, 6565, 6568, 6576, 6542, 6552] ) = {7182, 7183, 7184, 7186, 7187, 7192, 7194, 7197, 7203, 7204, 7205, 7208, 7210, 7213, 7221, 7268, 7269, 7270, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 7354, 7355, 7356, 7358, 7359, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 8396, 8398, 7375, 7376, 7377, 8401, 7380, 7382, 8407, 8408, 7385, 8409, 8412, 8414, 7393, 8417, 8425, 4366, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 6494, 6495, 6496, 6498, 6499, 7522, 6504, 6506, 6509, 6515, 6516, 6517, 6520, 6522, 6525, 6533, 6537, 6538, 6539, 6541, 6542, 6547, 6549, 6552, 6558, 6559, 6560, 6563, 6565, 6568, 6576, 436, 7612, 7613, 7614, 7616, 7617, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 8654, 8656, 7633, 7634, 7635, 8659, 7638, 7640, 8665, 8666, 7643, 8667, 8670, 8672, 7651, 8675, 8683, 522, 6687, 7741, 7742, 7743, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7767, 7769, 7772, 608, 7780, 6816, 694, 6838, 6839, 6840, 6842, 6843, 6848, 6850, 6853, 6859, 6860, 6861, 6864, 6866, 6869, 6877, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 861, 862, 863, 865, 866, 7010, 7011, 7012, 7014, 871, 7015, 873, 8042, 8043, 8044, 876, 8046, 7020, 7022, 8047, 7025, 882, 8052, 884, 883, 7031, 8054, 8057, 887, 7032, 7033, 889, 7038, 7036, 892, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 7096, 7097, 7098, 7100, 7101, 7106, 7108, 7111, 7117, 7118, 7119, 7122, 7124, 7127, 7135} ={ statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,return statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,return assignment_expression_list->,; jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ compound_statement->{statement_list},double compound_statement->{statement_list},identifier compound_statement->{statement_list},for compound_statement->{statement_list},break compound_statement->{statement_list},char compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while compound_statement->{statement_list},int compound_statement->{statement_list},continue compound_statement->{statement_list},void compound_statement->{statement_list},return type_specifier->char,identifier jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->break;,int jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,return type_specifier->int,identifier statement_list->statementstatement_list,} jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void type_specifier->double,identifier jump_statement->returnexpression;,return statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue statement->expression_statement,void statement->expression_statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->selection_statement,if statement->selection_statement,float statement->selection_statement,{ statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char selection_statement->if(expression)statementelsestatement,double statement->selection_statement,for statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier statement->selection_statement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->selection_statement,} selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue statement->iteration_statement,void statement->iteration_statement,return } = I97
Goto(I217,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I217,assignment_expression_list) = Closure( [7397, 7398, 7399, 7401, 7402, 7407, 7409, 7412, 7418, 7423, 7425, 7419, 7428, 7436, 7420] ) = {7425, 7428, 7397, 7398, 7399, 7401, 7402, 7436, 7407, 7409, 7412, 7418, 7419, 7420, 7423} ={ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,int } = I98
Goto(I217,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I217,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I217,iteration_statement) = Closure( [7139, 7140, 7141, 7143, 7144, 7149, 7151, 7154, 7160, 7165, 7167, 7170, 7178, 7161, 7162] ) = {7170, 7139, 7140, 7141, 7143, 7144, 7178, 7149, 7151, 7154, 7160, 7161, 7162, 7165, 7167} ={ statement->iteration_statement,void statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ statement->iteration_statement,double statement->iteration_statement,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,break statement->iteration_statement,char statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,while statement->iteration_statement,int statement->iteration_statement,continue } = I100
Goto(I217,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I217,identifier) = Closure( [3878, 3893] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I217,for) = Closure( [8687, 8688, 8689, 8691, 8692, 8697, 8699, 8702, 8708, 8709, 8710, 8713, 8715, 8718, 8726] ) = {8708, 8709, 8710, 8713, 8715, 8718, 8687, 8688, 8689, 8691, 8692, 8726, 8697, 8699, 8702} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I103
Goto(I217,break) = Closure( [7678, 7655, 7657, 7656, 7659, 7660, 7665, 7667, 7670, 7676, 7677, 7681, 7683, 7686, 7694] ) = {7681, 7683, 7686, 7655, 7656, 7657, 7659, 7660, 7694, 7665, 7667, 7670, 7676, 7677, 7678} ={ jump_statement->break;,int jump_statement->break;,continue jump_statement->break;,void jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ jump_statement->break;,double jump_statement->break;,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,break jump_statement->break;,char jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while } = I104
Goto(I217,declaration) = Closure( [7311, 7312, 7313, 7315, 7316, 7321, 7323, 7326, 7332, 7333, 7334, 7337, 7339, 7342, 7350] ) = {7332, 7333, 7334, 7337, 7339, 7342, 7311, 7312, 7313, 7315, 7316, 7350, 7321, 7323, 7326} ={ statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,if statement->declaration,float statement->declaration,{ statement->declaration,double statement->declaration,identifier statement->declaration,return statement->declaration,for statement->declaration,break statement->declaration,char } = I105
Goto(I217,expression_statement) = Closure( [6881, 6882, 6883, 6885, 6886, 6891, 6893, 6896, 6902, 6907, 6909, 6903, 6912, 6904, 6920] ) = {6912, 6881, 6882, 6883, 6885, 6886, 6920, 6891, 6893, 6896, 6902, 6903, 6904, 6907, 6909} ={ statement->expression_statement,void statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ statement->expression_statement,double statement->expression_statement,identifier statement->expression_statement,return statement->expression_statement,for statement->expression_statement,break statement->expression_statement,char statement->expression_statement,} statement->expression_statement,; statement->expression_statement,while statement->expression_statement,int statement->expression_statement,continue } = I106
Goto(I217,compound_statement) = Closure( [7225, 7226, 7227, 7229, 7230, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7264] ) = {7264, 7235, 7237, 7240, 7246, 7247, 7248, 7251, 7253, 7256, 7225, 7226, 7227, 7229, 7230} ={ statement->compound_statement,return statement->compound_statement,for statement->compound_statement,break statement->compound_statement,char statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier } = I107
Goto(I217,while) = Closure( [8429, 8430, 8431, 8433, 8434, 8439, 8441, 8444, 8450, 8451, 8455, 8457, 8452, 8460, 8468] ) = {8450, 8451, 8452, 8455, 8457, 8460, 8429, 8430, 8431, 8433, 8434, 8468, 8439, 8441, 8444} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,char } = I108
Goto(I217,jump_statement) = Closure( [6967, 6968, 6969, 6971, 6972, 6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 7006] ) = {6977, 6979, 6982, 6988, 6989, 6990, 6993, 6995, 6998, 6967, 6968, 6969, 6971, 6972, 7006} ={ statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,if statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier statement->jump_statement,return } = I109
Goto(I217,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I217,continue) = Closure( [7526, 7527, 7528, 7530, 7531, 7536, 7538, 7541, 7547, 7548, 7549, 7552, 7554, 7557, 7565] ) = {7552, 7554, 7557, 7526, 7527, 7528, 7530, 7531, 7565, 7536, 7538, 7541, 7547, 7548, 7549} ={ jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while } = I110
Goto(I217,return) = Closure( [7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 7823, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 7995] ) = {1793, 1796, 1797, 1799, 1801, 1805, 7956, 7957, 7958, 7960, 7961, 7966, 7968, 7971, 7977, 7978, 7979, 7982, 7984, 7987, 4409, 1595, 7995, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 7784, 7785, 7786, 7788, 7789, 7794, 7796, 7799, 7805, 7806, 7807, 7810, 7812, 7815, 4495, 7823, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void expression->constant_expression,; primary_expression->identifier,* jump_statement->return;,return function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while jump_statement->returnexpression;,int jump_statement->returnexpression;,continue jump_statement->returnexpression;,void expression->function_expression,; jump_statement->returnexpression;,return primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I111

Goto(I218,expression) = Closure( [3965] ) = {3965} ={ assignment_expression->identifierassignment_operatorexpression,) } = I224
Goto(I218,constant_expression) = Closure( [4438] ) = {4438} ={ expression->constant_expression,) } = I34
Goto(I218,() = Closure( [1836, 1839, 1840, 1842, 1844, 1848, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834] ) = {1793, 1796, 1797, 1799, 1801, 1805, 1810, 1815, 1818, 1824, 1826, 1827, 1832, 1834, 4395, 1836, 4911, 1839, 1840, 1842, 1844, 1848, 1595, 1600, 1603, 1609, 1611, 1612, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4481, 1681, 1686, 1689, 1695, 1697, 1698, 1703, 1705, 1707, 1710, 1711, 1713, 1715, 1719, 4567, 1767, 1772, 1775, 1781, 1783, 1784, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ expression->constant_expression,) primary_expression->(expression),^ function_expression->identifier(expression_list),) primary_expression->(expression),+ primary_expression->(expression),% primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= primary_expression->identifier,* primary_expression->identifier,) primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= expression->function_expression,) primary_expression->number,* primary_expression->number,) primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- primary_expression->number,> primary_expression->number,<= constant_expression->primary_expressionarithmetic_expression,) primary_expression->(expression),* primary_expression->(expression),) primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),< primary_expression->(expression),/ } = I35
Goto(I218,number) = Closure( [1724, 1729, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1756, 1758, 1762] ) = {1729, 1762, 1756, 1732, 1738, 1740, 1741, 1746, 1748, 1750, 1753, 1754, 1724, 1758} ={ primary_expression->number,) primary_expression->number,<= primary_expression->number,- primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,* primary_expression->number,> } = I36
Goto(I218,identifier) = Closure( [4954, 1638, 1643, 1646, 1652, 1654, 1655, 1660, 1662, 1664, 1667, 1668, 1670, 1672, 1676] ) = {1664, 1667, 1668, 1638, 1670, 1672, 1643, 1676, 1646, 1652, 1654, 1655, 4954, 1660, 1662} ={ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,* primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,<= primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& function_expression->identifier(expression_list),) primary_expression->identifier,< primary_expression->identifier,/ } = I37
Goto(I218,function_expression) = Closure( [4524] ) = {4524} ={ expression->function_expression,) } = I38
Goto(I218,primary_expression) = Closure( [4610] ) = {4610, 4868, 2058, 2316, 2574, 1935, 2832, 2193, 2451, 2709, 1941, 2199, 2967, 2457, 2715, 2973, 1972, 2230, 2488, 2746, 2107, 3004, 2365, 2623, 2113, 2881, 2371, 2629, 2887, 4696, 2144, 2402, 2660, 2021, 2918, 2279, 2537, 2795, 2027, 2285, 2543, 2801} ={ constant_expression->primary_expressionarithmetic_expression,) arithmetic_expression->,) operator->-,( operator->%,( operator-><,( operator->+,number operator->==,( operator->/,number operator->&,number operator->!=,number operator->+,identifier operator->/,identifier operator->>=,number operator->&,identifier operator->!=,identifier operator->>=,identifier operator->+,( operator->/,( operator->&,( operator->!=,( operator->*,number operator->>=,( operator->^,number operator->>,number operator->*,identifier operator-><=,number operator->^,identifier operator->>,identifier operator-><=,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,) operator->*,( operator->^,( operator->>,( operator->-,number operator-><=,( operator->%,number operator-><,number operator->==,number operator->-,identifier operator->%,identifier operator-><,identifier operator->==,identifier } = I39


Goto(I220,type_specifier) = Closure( [934] ) = {1098, 1083, 934} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I175
Goto(I220,statement) = Closure( [8287] ) = {8287} ={ selection_statement->if(expression)statementelsestatement,else } = I225
Goto(I220,if) = Closure( [8115] ) = {8115} ={ selection_statement->if(expression)statementelsestatement,else } = I177
Goto(I220,selection_statement) = Closure( [7083] ) = {7083} ={ statement->selection_statement,else } = I178
Goto(I220,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I220,{) = Closure( [6567] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 6567, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return compound_statement->{statement_list},else type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I179
Goto(I220,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I220,assignment_expression_list) = Closure( [7427] ) = {7427} ={ expression_statement->assignment_expression_list;,else } = I180
Goto(I220,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I220,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I220,iteration_statement) = Closure( [7169] ) = {7169} ={ statement->iteration_statement,else } = I181
Goto(I220,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I220,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I220,for) = Closure( [8717] ) = {8717} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I182
Goto(I220,break) = Closure( [7685] ) = {7685} ={ jump_statement->break;,else } = I183
Goto(I220,declaration) = Closure( [7341] ) = {7341} ={ statement->declaration,else } = I184
Goto(I220,expression_statement) = Closure( [6911] ) = {6911} ={ statement->expression_statement,else } = I185
Goto(I220,compound_statement) = Closure( [7255] ) = {7255} ={ statement->compound_statement,else } = I186
Goto(I220,while) = Closure( [8459] ) = {8459} ={ iteration_statement->while(expression)statement,else } = I187
Goto(I220,jump_statement) = Closure( [6997] ) = {6997} ={ statement->jump_statement,else } = I188
Goto(I220,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I220,continue) = Closure( [7556] ) = {7556} ={ jump_statement->continue;,else } = I189
Goto(I220,return) = Closure( [7986, 7814] ) = {1793, 1796, 1797, 7814, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 7986, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% jump_statement->returnexpression;,else primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- jump_statement->return;,else primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I190

Goto(I221,;) = Closure( [8889] ) = {8889, 3836} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else assignment_expression->identifierassignment_operatorexpression,) } = I226

Goto(I222,type_specifier) = Closure( [934] ) = {1098, 1083, 934} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I175
Goto(I222,statement) = Closure( [8631] ) = {8631} ={ iteration_statement->while(expression)statement,else } = I227
Goto(I222,if) = Closure( [8115] ) = {8115} ={ selection_statement->if(expression)statementelsestatement,else } = I177
Goto(I222,selection_statement) = Closure( [7083] ) = {7083} ={ statement->selection_statement,else } = I178
Goto(I222,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I222,{) = Closure( [6567] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 6567, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return compound_statement->{statement_list},else type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I179
Goto(I222,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I222,assignment_expression_list) = Closure( [7427] ) = {7427} ={ expression_statement->assignment_expression_list;,else } = I180
Goto(I222,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I222,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I222,iteration_statement) = Closure( [7169] ) = {7169} ={ statement->iteration_statement,else } = I181
Goto(I222,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I222,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I222,for) = Closure( [8717] ) = {8717} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I182
Goto(I222,break) = Closure( [7685] ) = {7685} ={ jump_statement->break;,else } = I183
Goto(I222,declaration) = Closure( [7341] ) = {7341} ={ statement->declaration,else } = I184
Goto(I222,expression_statement) = Closure( [6911] ) = {6911} ={ statement->expression_statement,else } = I185
Goto(I222,compound_statement) = Closure( [7255] ) = {7255} ={ statement->compound_statement,else } = I186
Goto(I222,while) = Closure( [8459] ) = {8459} ={ iteration_statement->while(expression)statement,else } = I187
Goto(I222,jump_statement) = Closure( [6997] ) = {6997} ={ statement->jump_statement,else } = I188
Goto(I222,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I222,continue) = Closure( [7556] ) = {7556} ={ jump_statement->continue;,else } = I189
Goto(I222,return) = Closure( [7986, 7814] ) = {1793, 1796, 1797, 7814, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 7986, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% jump_statement->returnexpression;,else primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- jump_statement->return;,else primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I190



Goto(I225,else) = Closure( [8330] ) = {7040, 7298, 7943, 8072, 522, 8330, 780, 4237, 3850, 4366, 6868, 7126, 7384, 7513, 7642, 7771, 3835, 608, 8416, 8674, 6954, 7212, 436, 694, 891, 6524} ={ statement->selection_statement,else statement->declaration,else jump_statement->return;,else selection_statement->if(expression)statementelsestatement,else type_specifier->int,identifier selection_statement->if(expression)statementelsestatement,else type_specifier->void,identifier assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list->,; statement->expression_statement,else statement->iteration_statement,else expression_statement->assignment_expression_list;,else jump_statement->continue;,else jump_statement->break;,else jump_statement->returnexpression;,else assignment_expression->identifierassignment_operatorexpression,, type_specifier->double,identifier iteration_statement->while(expression)statement,else iteration_statement->for(declarationexpression;assignment_expression)statement,else statement->jump_statement,else statement->compound_statement,else type_specifier->char,identifier type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else compound_statement->{statement_list},else } = I228

Goto(I226,assignment_expression) = Closure( [8932] ) = {8932} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I229
Goto(I226,identifier) = Closure( [3879] ) = {3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3879, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575, 3262} ={ assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,) assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier assignment_operator->-=,( } = I209


Goto(I228,type_specifier) = Closure( [934] ) = {1098, 1083, 934} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I175
Goto(I228,statement) = Closure( [8373] ) = {8373} ={ selection_statement->if(expression)statementelsestatement,else } = I230
Goto(I228,if) = Closure( [8115] ) = {8115} ={ selection_statement->if(expression)statementelsestatement,else } = I177
Goto(I228,selection_statement) = Closure( [7083] ) = {7083} ={ statement->selection_statement,else } = I178
Goto(I228,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I228,{) = Closure( [6567] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 6567, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return compound_statement->{statement_list},else type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I179
Goto(I228,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I228,assignment_expression_list) = Closure( [7427] ) = {7427} ={ expression_statement->assignment_expression_list;,else } = I180
Goto(I228,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I228,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I228,iteration_statement) = Closure( [7169] ) = {7169} ={ statement->iteration_statement,else } = I181
Goto(I228,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I228,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I228,for) = Closure( [8717] ) = {8717} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I182
Goto(I228,break) = Closure( [7685] ) = {7685} ={ jump_statement->break;,else } = I183
Goto(I228,declaration) = Closure( [7341] ) = {7341} ={ statement->declaration,else } = I184
Goto(I228,expression_statement) = Closure( [6911] ) = {6911} ={ statement->expression_statement,else } = I185
Goto(I228,compound_statement) = Closure( [7255] ) = {7255} ={ statement->compound_statement,else } = I186
Goto(I228,while) = Closure( [8459] ) = {8459} ={ iteration_statement->while(expression)statement,else } = I187
Goto(I228,jump_statement) = Closure( [6997] ) = {6997} ={ statement->jump_statement,else } = I188
Goto(I228,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I228,continue) = Closure( [7556] ) = {7556} ={ jump_statement->continue;,else } = I189
Goto(I228,return) = Closure( [7986, 7814] ) = {1793, 1796, 1797, 7814, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 7986, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% jump_statement->returnexpression;,else primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- jump_statement->return;,else primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I190

Goto(I229,)) = Closure( [8975] ) = {7040, 7298, 7943, 8072, 522, 3850, 780, 4237, 4366, 8975, 6868, 7126, 7384, 7513, 7642, 7771, 3835, 608, 8416, 8674, 6954, 7212, 436, 694, 891, 6524} ={ statement->selection_statement,else statement->declaration,else jump_statement->return;,else selection_statement->if(expression)statementelsestatement,else type_specifier->int,identifier assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->,; iteration_statement->for(declarationexpression;assignment_expression)statement,else statement->expression_statement,else statement->iteration_statement,else expression_statement->assignment_expression_list;,else jump_statement->continue;,else jump_statement->break;,else jump_statement->returnexpression;,else assignment_expression->identifierassignment_operatorexpression,, type_specifier->double,identifier iteration_statement->while(expression)statement,else iteration_statement->for(declarationexpression;assignment_expression)statement,else statement->jump_statement,else statement->compound_statement,else type_specifier->char,identifier type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else compound_statement->{statement_list},else } = I231


Goto(I231,type_specifier) = Closure( [934] ) = {1098, 1083, 934} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I175
Goto(I231,statement) = Closure( [9018] ) = {9018} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I232
Goto(I231,if) = Closure( [8115] ) = {8115} ={ selection_statement->if(expression)statementelsestatement,else } = I177
Goto(I231,selection_statement) = Closure( [7083] ) = {7083} ={ statement->selection_statement,else } = I178
Goto(I231,float) = Closure( [737] ) = {737} ={ type_specifier->float,identifier } = I2
Goto(I231,{) = Closure( [6567] ) = {522, 7182, 7183, 7184, 7186, 7187, 8043, 7192, 8044, 7194, 7197, 6687, 8046, 7203, 7204, 7205, 7208, 7210, 7213, 7031, 7221, 7741, 7742, 7743, 8052, 7745, 7746, 7751, 7753, 7756, 7762, 7763, 7764, 7038, 7767, 7769, 8057, 7772, 608, 7268, 7269, 7270, 7780, 7272, 7273, 7278, 7280, 7283, 7289, 7290, 7291, 7294, 7296, 7299, 7307, 4237, 6816, 694, 6838, 6839, 6840, 7354, 7355, 7356, 6842, 7358, 7359, 6843, 6848, 8386, 8387, 7364, 8388, 7366, 8390, 8391, 7369, 6850, 6853, 8396, 6859, 8398, 7375, 7376, 7377, 8401, 6860, 7380, 6861, 7382, 8407, 8408, 7385, 8409, 6866, 8412, 6869, 8414, 6877, 7393, 8417, 884, 6864, 8425, 7913, 7914, 7915, 7917, 7918, 7923, 7925, 7928, 3835, 7934, 7935, 7936, 7939, 7941, 7944, 3850, 780, 6924, 4366, 6925, 6926, 6928, 6929, 7952, 6934, 6936, 6939, 6945, 6946, 6947, 6950, 6952, 6955, 6963, 876, 7483, 7484, 7485, 7487, 7488, 7493, 7495, 7498, 7504, 7505, 7506, 7509, 7511, 7514, 861, 6494, 6495, 6496, 862, 6498, 6499, 7522, 863, 865, 866, 6504, 7010, 6506, 7011, 7020, 6509, 7014, 871, 7015, 873, 8042, 6515, 6516, 6517, 7022, 8047, 6520, 7025, 6522, 882, 883, 6525, 8054, 887, 7032, 7033, 889, 7036, 892, 6533, 8063, 8064, 8065, 7041, 900, 8068, 8070, 8073, 7049, 8081, 6567, 436, 7096, 7097, 7098, 7612, 7613, 7614, 7100, 7616, 7617, 7101, 7106, 8644, 8645, 7622, 8646, 7624, 8648, 8649, 7627, 7108, 7111, 8654, 7117, 8656, 7633, 7634, 7635, 8659, 7012, 7638, 7118, 7640, 8665, 8666, 7643, 8667, 7124, 8670, 7127, 8672, 7135, 7651, 8675, 7119, 8683, 7122} ={ type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,float statement->compound_statement,{ statement->compound_statement,double statement->compound_statement,identifier selection_statement->if(expression)statementelsestatement,float statement->compound_statement,for selection_statement->if(expression)statementelsestatement,{ statement->compound_statement,break statement->compound_statement,char statement_list->statementstatement_list,} selection_statement->if(expression)statementelsestatement,double statement->compound_statement,} statement->compound_statement,; statement->compound_statement,while statement->compound_statement,int statement->compound_statement,continue statement->compound_statement,void statement->selection_statement,} statement->compound_statement,return jump_statement->returnexpression;,if jump_statement->returnexpression;,float jump_statement->returnexpression;,{ selection_statement->if(expression)statementelsestatement,for jump_statement->returnexpression;,double jump_statement->returnexpression;,identifier jump_statement->returnexpression;,for jump_statement->returnexpression;,break jump_statement->returnexpression;,char jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,while statement->selection_statement,continue jump_statement->returnexpression;,int jump_statement->returnexpression;,continue selection_statement->if(expression)statementelsestatement,char jump_statement->returnexpression;,void type_specifier->double,identifier statement->declaration,if statement->declaration,float statement->declaration,{ jump_statement->returnexpression;,return statement->declaration,double statement->declaration,identifier statement->declaration,for statement->declaration,break statement->declaration,char statement->declaration,} statement->declaration,; statement->declaration,while statement->declaration,int statement->declaration,continue statement->declaration,void statement->declaration,return assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement_list->,} type_specifier->float,identifier statement->expression_statement,if statement->expression_statement,float statement->expression_statement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,{ statement->expression_statement,double expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,identifier statement->expression_statement,identifier statement->expression_statement,for iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,{ expression_statement->assignment_expression_list;,break iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,identifier expression_statement->assignment_expression_list;,char statement->expression_statement,break statement->expression_statement,char iteration_statement->while(expression)statement,for statement->expression_statement,} iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,char statement->expression_statement,; expression_statement->assignment_expression_list;,int statement->expression_statement,while expression_statement->assignment_expression_list;,continue iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,while statement->expression_statement,continue iteration_statement->while(expression)statement,int statement->expression_statement,void iteration_statement->while(expression)statement,continue statement->expression_statement,return expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->expression_statement,int iteration_statement->while(expression)statement,return jump_statement->return;,if jump_statement->return;,float jump_statement->return;,{ jump_statement->return;,double jump_statement->return;,identifier jump_statement->return;,for jump_statement->return;,break jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} jump_statement->return;,; jump_statement->return;,while jump_statement->return;,int jump_statement->return;,continue jump_statement->return;,void assignment_expression->identifierassignment_operatorexpression,; type_specifier->void,identifier statement->jump_statement,if assignment_expression_list->,; statement->jump_statement,float statement->jump_statement,{ statement->jump_statement,double statement->jump_statement,identifier jump_statement->return;,return statement->jump_statement,for statement->jump_statement,break statement->jump_statement,char statement->jump_statement,} statement->jump_statement,; statement->jump_statement,while statement->jump_statement,int statement->jump_statement,continue statement->jump_statement,void statement->jump_statement,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char jump_statement->continue;,if jump_statement->continue;,float jump_statement->continue;,{ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,for jump_statement->continue;,break jump_statement->continue;,char jump_statement->continue;,} jump_statement->continue;,; jump_statement->continue;,while jump_statement->continue;,int jump_statement->continue;,continue jump_statement->continue;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if compound_statement->{statement_list},if compound_statement->{statement_list},float compound_statement->{statement_list},{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float compound_statement->{statement_list},double compound_statement->{statement_list},identifier jump_statement->continue;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier compound_statement->{statement_list},for statement->selection_statement,if compound_statement->{statement_list},break statement->selection_statement,float statement->selection_statement,for compound_statement->{statement_list},char statement->selection_statement,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for statement->selection_statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break selection_statement->if(expression)statementelsestatement,if compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},while statement->selection_statement,break selection_statement->if(expression)statementelsestatement,identifier compound_statement->{statement_list},int statement->selection_statement,char compound_statement->{statement_list},continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; compound_statement->{statement_list},void selection_statement->if(expression)statementelsestatement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int statement->selection_statement,; statement->selection_statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue statement->selection_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void compound_statement->{statement_list},return selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,while statement->selection_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return selection_statement->if(expression)statementelsestatement,return compound_statement->{statement_list},else type_specifier->char,identifier statement->iteration_statement,if statement->iteration_statement,float statement->iteration_statement,{ jump_statement->break;,if jump_statement->break;,float jump_statement->break;,{ statement->iteration_statement,double jump_statement->break;,double jump_statement->break;,identifier statement->iteration_statement,identifier statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->break;,for iteration_statement->for(declarationexpression;assignment_expression)statement,{ jump_statement->break;,break iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,identifier jump_statement->break;,char statement->iteration_statement,break statement->iteration_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,} jump_statement->break;,; jump_statement->break;,while iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->selection_statement,{ jump_statement->break;,int statement->iteration_statement,; jump_statement->break;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,; jump_statement->break;,void iteration_statement->for(declarationexpression;assignment_expression)statement,while statement->iteration_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,continue statement->iteration_statement,return jump_statement->break;,return iteration_statement->for(declarationexpression;assignment_expression)statement,void statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,return statement->iteration_statement,int } = I179
Goto(I231,char) = Closure( [479] ) = {479} ={ type_specifier->char,identifier } = I3
Goto(I231,assignment_expression_list) = Closure( [7427] ) = {7427} ={ expression_statement->assignment_expression_list;,else } = I180
Goto(I231,void) = Closure( [823] ) = {823} ={ type_specifier->void,identifier } = I5
Goto(I231,assignment_expression) = Closure( [4280] ) = {4280, 4194, 4022} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I99
Goto(I231,iteration_statement) = Closure( [7169] ) = {7169} ={ statement->iteration_statement,else } = I181
Goto(I231,double) = Closure( [651] ) = {651} ={ type_specifier->double,identifier } = I7
Goto(I231,identifier) = Closure( [3893, 3878] ) = {3090, 3348, 3606, 3225, 3483, 3741, 3231, 3489, 3747, 3878, 3893, 3262, 3520, 3778, 3139, 3397, 3655, 3145, 3403, 3661, 3176, 3434, 3692, 3053, 3311, 3569, 3059, 3317, 3575} ={ assignment_operator->=,( assignment_operator->*=,( assignment_operator->^=,( assignment_operator->-=,number assignment_operator->%=,number assignment_operator->|=,number assignment_operator->-=,identifier assignment_operator->%=,identifier assignment_operator->|=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_expression->identifierassignment_operatorexpression,; assignment_operator->-=,( assignment_operator->%=,( assignment_operator->|=,( assignment_operator->+=,number assignment_operator->/=,number assignment_operator->&=,number assignment_operator->+=,identifier assignment_operator->/=,identifier assignment_operator->&=,identifier assignment_operator->+=,( assignment_operator->/=,( assignment_operator->&=,( assignment_operator->=,number assignment_operator->*=,number assignment_operator->^=,number assignment_operator->=,identifier assignment_operator->*=,identifier assignment_operator->^=,identifier } = I101
Goto(I231,for) = Closure( [8717] ) = {8717} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I182
Goto(I231,break) = Closure( [7685] ) = {7685} ={ jump_statement->break;,else } = I183
Goto(I231,declaration) = Closure( [7341] ) = {7341} ={ statement->declaration,else } = I184
Goto(I231,expression_statement) = Closure( [6911] ) = {6911} ={ statement->expression_statement,else } = I185
Goto(I231,compound_statement) = Closure( [7255] ) = {7255} ={ statement->compound_statement,else } = I186
Goto(I231,while) = Closure( [8459] ) = {8459} ={ iteration_statement->while(expression)statement,else } = I187
Goto(I231,jump_statement) = Closure( [6997] ) = {6997} ={ statement->jump_statement,else } = I188
Goto(I231,int) = Closure( [565] ) = {565} ={ type_specifier->int,identifier } = I9
Goto(I231,continue) = Closure( [7556] ) = {7556} ={ jump_statement->continue;,else } = I189
Goto(I231,return) = Closure( [7986, 7814] ) = {1793, 1796, 1797, 7814, 1799, 1801, 1805, 4495, 1681, 1689, 1695, 1697, 1698, 1700, 1703, 1705, 1707, 1710, 1711, 1713, 7986, 1715, 1719, 4409, 1595, 4925, 1603, 1609, 1611, 1612, 1614, 1617, 1619, 1621, 1624, 1625, 1627, 1629, 1633, 4581, 1767, 1775, 1781, 1783, 1784, 1786, 1789, 1791} ={ primary_expression->(expression),^ primary_expression->(expression),+ primary_expression->(expression),% jump_statement->returnexpression;,else primary_expression->(expression),- primary_expression->(expression),> primary_expression->(expression),<= expression->function_expression,; primary_expression->number,* primary_expression->number,>= primary_expression->number,!= primary_expression->number,== primary_expression->number,& primary_expression->number,; primary_expression->number,< primary_expression->number,/ primary_expression->number,^ primary_expression->number,+ primary_expression->number,% primary_expression->number,- jump_statement->return;,else primary_expression->number,> primary_expression->number,<= expression->constant_expression,; primary_expression->identifier,* function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,== primary_expression->identifier,& primary_expression->identifier,; primary_expression->identifier,< primary_expression->identifier,/ primary_expression->identifier,^ primary_expression->identifier,+ primary_expression->identifier,% primary_expression->identifier,- primary_expression->identifier,> primary_expression->identifier,<= constant_expression->primary_expressionarithmetic_expression,; primary_expression->(expression),* primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),== primary_expression->(expression),& primary_expression->(expression),; primary_expression->(expression),< primary_expression->(expression),/ } = I190


